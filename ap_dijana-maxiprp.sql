--
-- Create Schema Script
--   Database Version            : 19.0.0.0.0
--   Database Compatible Level   : 19.0.0.0.0
--   Script Compatible Level     : 19.0.0.0.0
--   Toad Version                : 16.3.231.2085
--   DB Connect String           : MAXIPRP
--   Schema                      : AP_DIJANA
--   Script Created by           : AP_DIJANA
--   Script Created at           : 28/01/2025 10:13:28 AM
--   Notes                       : 
--

-- Object Counts: 
--   Indexes: 43        Columns: 77         
--   Procedures: 8      Lines of Code: 1020 
--   Tables: 36         Columns: 325        Constraints: 181    


-- "Set define off" turns off substitution variables.
Set define off; 

--
-- DATABASECHANGELOG  (Table) 
--
--   Row Count: 1
CREATE TABLE AP_DIJANA.DATABASECHANGELOG
(
  ID             VARCHAR2(255 BYTE)             NOT NULL,
  AUTHOR         VARCHAR2(255 BYTE)             NOT NULL,
  FILENAME       VARCHAR2(255 BYTE)             NOT NULL,
  DATEEXECUTED   TIMESTAMP(6)                   NOT NULL,
  ORDEREXECUTED  INTEGER                        NOT NULL,
  EXECTYPE       VARCHAR2(10 BYTE)              NOT NULL,
  MD5SUM         VARCHAR2(35 BYTE),
  DESCRIPTION    VARCHAR2(255 BYTE),
  COMMENTS       VARCHAR2(255 BYTE),
  TAG            VARCHAR2(255 BYTE),
  LIQUIBASE      VARCHAR2(20 BYTE),
  CONTEXTS       VARCHAR2(255 BYTE),
  LABELS         VARCHAR2(255 BYTE),
  DEPLOYMENT_ID  VARCHAR2(10 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- DATABASECHANGELOGLOCK  (Table) 
--
--   Row Count: 1
CREATE TABLE AP_DIJANA.DATABASECHANGELOGLOCK
(
  ID           INTEGER                          NOT NULL,
  LOCKED       NUMBER(1)                        NOT NULL,
  LOCKGRANTED  TIMESTAMP(6),
  LOCKEDBY     VARCHAR2(255 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- PK_DATABASECHANGELOGLOCK  (Index) 
--
--  Dependencies: 
--   DATABASECHANGELOGLOCK (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.PK_DATABASECHANGELOGLOCK ON AP_DIJANA.DATABASECHANGELOGLOCK
(ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.DATABASECHANGELOGLOCK ADD (
  CONSTRAINT PK_DATABASECHANGELOGLOCK
  PRIMARY KEY
  (ID)
  USING INDEX AP_DIJANA.PK_DATABASECHANGELOGLOCK
  ENABLE VALIDATE);



--
-- FLEX_APP_LANGUAGE  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_APP_LANGUAGE
(
  APP_LANGUAGE_ID  NUMBER                       NOT NULL,
  LANGUAGE_NAME    NVARCHAR2(50)                NOT NULL,
  LANGUAGE_CODE    NVARCHAR2(2)                 NOT NULL,
  IS_ACTIVE        CHAR(1 BYTE)                 NOT NULL,
  CREATION_DATE    DATE                         NOT NULL,
  WHO_CHANGED      NVARCHAR2(50)                NOT NULL,
  WHEN_CHANGED     DATE                         NOT NULL
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- APP_LANGUAGE_PK  (Index) 
--
--  Dependencies: 
--   FLEX_APP_LANGUAGE (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.APP_LANGUAGE_PK ON AP_DIJANA.FLEX_APP_LANGUAGE
(APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_APP_LANGUAGE ADD (
  CONSTRAINT APP_LANGUAGE_PK
  PRIMARY KEY
  (APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.APP_LANGUAGE_PK
  ENABLE VALIDATE);



--
-- FLEX_ATTENDANCE_RECORD_T  (Table) 
--
--  Dependencies: 
--   FLEX_APP_LANGUAGE (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD_T
(
  APP_LANGUAGE_ID       NUMBER                  NOT NULL,
  NAME                  VARCHAR2(50 BYTE)       NOT NULL,
  LAST_NAME             VARCHAR2(50 BYTE)       NOT NULL,
  TYPE_OF_JOB           VARCHAR2(50 BYTE),
  SF_TYPE_OF_PRESENCE   VARCHAR2(4 BYTE),
  TIME_OF_DEPARTURE     DATE,
  WHO_ADDED             NVARCHAR2(50),
  WHEN_ADDED            DATE,
  WHO_CHANGED           NVARCHAR2(50),
  WHEN_CHANGED          DATE,
  ATTENDANCE_RECORD_ID  NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- ATTENDANCE_RECORD_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_ATTENDANCE_RECORD_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.ATTENDANCE_RECORD_T_PK ON AP_DIJANA.FLEX_ATTENDANCE_RECORD_T
(ATTENDANCE_RECORD_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD_T ADD (
  CONSTRAINT ATTENDANCE_RECORD_T_PK
  PRIMARY KEY
  (ATTENDANCE_RECORD_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.ATTENDANCE_RECORD_T_PK
  ENABLE VALIDATE);



--
-- FLEX_ATTENDANCE_RECORD_TYPE  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD_TYPE
(
  SF_RECORD_TYPE  VARCHAR2(4 BYTE),
  DESCRIPTION     VARCHAR2(30 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- TIP_EVIDENCIJA_PRISUTNOSTI_PK  (Index) 
--
--  Dependencies: 
--   FLEX_ATTENDANCE_RECORD_TYPE (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.TIP_EVIDENCIJA_PRISUTNOSTI_PK ON AP_DIJANA.FLEX_ATTENDANCE_RECORD_TYPE
(SF_RECORD_TYPE)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD_TYPE ADD (
  CONSTRAINT TIP_EVIDENCIJA_PRISUTNOSTI_PK
  PRIMARY KEY
  (SF_RECORD_TYPE)
  USING INDEX AP_DIJANA.TIP_EVIDENCIJA_PRISUTNOSTI_PK
  ENABLE VALIDATE);



--
-- FLEX_CERTIFICATE_FROM_THE_SCHOOL  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL
(
  CERTIFICATE_ID    VARCHAR2(10 BYTE),
  USER_ID           NUMBER                      NOT NULL,
  CERTIFICATE_DATE  DATE,
  IS_ACTIVE         CHAR(1 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CERTIFICATE_FROM_THE_SCHOOL_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CERTIFICATE_FROM_THE_SCHOOL (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.CERTIFICATE_FROM_THE_SCHOOL_PK ON AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL
(CERTIFICATE_ID, USER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL ADD (
  CONSTRAINT CERTIFICATE_FROM_THE_SCHOOL_PK
  PRIMARY KEY
  (CERTIFICATE_ID, USER_ID)
  USING INDEX AP_DIJANA.CERTIFICATE_FROM_THE_SCHOOL_PK
  ENABLE VALIDATE);



--
-- FLEX_CMS_ROLE  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CMS_ROLE
(
  CMS_ROLE_ID           NUMBER,
  CMS_ROLE_NAME         NVARCHAR2(50)           NOT NULL,
  CMS_ROLE_DESCRIPTION  NVARCHAR2(100),
  IS_ONLY_FOR_INTERNAL  CHAR(1 BYTE)            NOT NULL,
  IS_ACTIVE             CHAR(1 BYTE)            NOT NULL,
  CREATION_DATE         DATE                    NOT NULL,
  WHO_CHANGED           NVARCHAR2(50)           NOT NULL,
  WHEN_CHANGED          DATE                    NOT NULL
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_CMS_ROLE_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CMS_ROLE (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_CMS_ROLE_PK ON AP_DIJANA.FLEX_CMS_ROLE
(CMS_ROLE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
--
-- U_FLEX_CMS_ROLE_NAME  (Index) 
--
--  Dependencies: 
--   FLEX_CMS_ROLE (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.U_FLEX_CMS_ROLE_NAME ON AP_DIJANA.FLEX_CMS_ROLE
(CMS_ROLE_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CMS_ROLE ADD (
  CONSTRAINT FLEX_CMS_ROLE_PK
  PRIMARY KEY
  (CMS_ROLE_ID)
  USING INDEX AP_DIJANA.FLEX_CMS_ROLE_PK
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CMS_ROLE ADD (
  CONSTRAINT U_FLEX_CMS_ROLE_NAME
  UNIQUE (CMS_ROLE_NAME)
  USING INDEX AP_DIJANA.U_FLEX_CMS_ROLE_NAME
  ENABLE VALIDATE);



--
-- FLEX_CMS_ROLE_WEB_API_ENDPOINT  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINT
(
  CMS_ROLE_WEB_API_ENDPOINT_ID  NUMBER,
  CMS_ROLE_ID                   NUMBER          NOT NULL,
  WEB_API_ENDPOINT_ID           NUMBER          NOT NULL,
  IS_ACTIVE                     CHAR(1 BYTE)    NOT NULL,
  CREATION_DATE                 DATE            NOT NULL,
  WHO_CHANGED                   NVARCHAR2(50)   NOT NULL,
  WHEN_CHANGED                  DATE            NOT NULL
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_CMS_ROLE_WEB_API_ENDPOINTPK  (Index) 
--
--  Dependencies: 
--   FLEX_CMS_ROLE_WEB_API_ENDPOINT (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINTPK ON AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINT
(CMS_ROLE_WEB_API_ENDPOINT_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
--
-- U_FLEX_CMS_ROLE_WEB_API_ENDPOINT  (Index) 
--
--  Dependencies: 
--   FLEX_CMS_ROLE_WEB_API_ENDPOINT (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.U_FLEX_CMS_ROLE_WEB_API_ENDPOINT ON AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINT
(CMS_ROLE_ID, WEB_API_ENDPOINT_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINT ADD (
  CONSTRAINT FLEX_CMS_ROLE_WEB_API_ENDPOINTPK
  PRIMARY KEY
  (CMS_ROLE_WEB_API_ENDPOINT_ID)
  USING INDEX AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINTPK
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CMS_ROLE_WEB_API_ENDPOINT ADD (
  CONSTRAINT U_FLEX_CMS_ROLE_WEB_API_ENDPOINT
  UNIQUE (CMS_ROLE_ID, WEB_API_ENDPOINT_ID)
  USING INDEX AP_DIJANA.U_FLEX_CMS_ROLE_WEB_API_ENDPOINT
  ENABLE VALIDATE);



--
-- FLEX_CMS_SUPPLIER  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CMS_SUPPLIER
(
  CMS_SUPPLIER_ID  INTEGER,
  NAME             NVARCHAR2(50)                NOT NULL,
  SF_KOM           NUMBER(10),
  ADDRESS          NVARCHAR2(100),
  EMAIL            NVARCHAR2(50),
  PHONE            NVARCHAR2(50),
  CREATION_DATE    DATE                         NOT NULL,
  WHO_CHANGED      NVARCHAR2(50)                NOT NULL,
  WHEN_CHANGED     DATE                         NOT NULL,
  IS_ACTIVE        CHAR(1 BYTE)                 NOT NULL
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_CMS_SUPPLIER_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CMS_SUPPLIER (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_CMS_SUPPLIER_PK ON AP_DIJANA.FLEX_CMS_SUPPLIER
(CMS_SUPPLIER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CMS_SUPPLIER ADD (
  CONSTRAINT FLEX_CMS_SUPPLIER_PK
  PRIMARY KEY
  (CMS_SUPPLIER_ID)
  USING INDEX AP_DIJANA.FLEX_CMS_SUPPLIER_PK
  ENABLE VALIDATE);



--
-- FLEX_EVALUATION  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_EVALUATION
(
  USER_ID           NUMBER                      NOT NULL,
  SF_POS            VARCHAR2(3 BYTE)            NOT NULL,
  RJ                VARCHAR2(3 BYTE)            NOT NULL,
  FLEX_EVALUATION   NUMBER,
  FLEX_COMMENT      VARCHAR2(50 BYTE),
  STORE_EVALUATION  NUMBER,
  STORE_COMMENT     VARCHAR2(50 BYTE),
  WHO_ADDED         NVARCHAR2(50),
  WHEN_ADDED        DATE,
  WHO_CHANGED       NVARCHAR2(50),
  WHEN_CHANGED      DATE,
  EVALUATION_ID     NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- PK_EVALUATION  (Index) 
--
--  Dependencies: 
--   FLEX_EVALUATION (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.PK_EVALUATION ON AP_DIJANA.FLEX_EVALUATION
(USER_ID, SF_POS, RJ, EVALUATION_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_EVALUATION ADD (
  CONSTRAINT PK_EVALUATION
  PRIMARY KEY
  (USER_ID, SF_POS, RJ, EVALUATION_ID)
  USING INDEX AP_DIJANA.PK_EVALUATION
  ENABLE VALIDATE);



--
-- FLEX_EVALUATION_T  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_EVALUATION_T
(
  APP_LANGUAGE_ID  NUMBER                       NOT NULL,
  FLEX_COMMENT     VARCHAR2(50 BYTE),
  STORE_COMMENT    VARCHAR2(50 BYTE),
  WHO_ADDED        NVARCHAR2(50),
  WHEN_ADDED       DATE,
  WHO_CHANGED      NVARCHAR2(50),
  WHEN_CHANGED     DATE,
  EVALUATION_ID    NUMBER,
  USER_ID          NUMBER,
  SF_POS           VARCHAR2(3 BYTE),
  RJ               VARCHAR2(3 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- EVALUATION_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_EVALUATION_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.EVALUATION_T_PK ON AP_DIJANA.FLEX_EVALUATION_T
(USER_ID, SF_POS, RJ, EVALUATION_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_EVALUATION_T ADD (
  CONSTRAINT EVALUATION_T_PK
  PRIMARY KEY
  (USER_ID, SF_POS, RJ, EVALUATION_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.EVALUATION_T_PK
  ENABLE VALIDATE);



--
-- FLEX_MPO_FUND_HOURS  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_MPO_FUND_HOURS
(
  MPO_FUND_HOURS_ID  VARCHAR2(10 BYTE),
  DATE_FROM          DATE,
  DATE_TO            DATE,
  FUND_HOURS         NUMBER,
  SF_POS             VARCHAR2(3 BYTE),
  RJ                 VARCHAR2(3 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- MPO_FUND_HOURS_PK  (Index) 
--
--  Dependencies: 
--   FLEX_MPO_FUND_HOURS (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.MPO_FUND_HOURS_PK ON AP_DIJANA.FLEX_MPO_FUND_HOURS
(MPO_FUND_HOURS_ID, SF_POS, RJ)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_MPO_FUND_HOURS ADD (
  CONSTRAINT MPO_FUND_HOURS_PK
  PRIMARY KEY
  (MPO_FUND_HOURS_ID, SF_POS, RJ)
  USING INDEX AP_DIJANA.MPO_FUND_HOURS_PK
  ENABLE VALIDATE);



--
-- FLEX_OFFER  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_OFFER
(
  OFFER_ID             VARCHAR2(10 BYTE)        NOT NULL,
  TIME_FROM            DATE                     NOT NULL,
  TIME_TO              DATE                     NOT NULL,
  NUMBER_OF_EXECUTORS  NUMBER                   NOT NULL,
  SF_POS               VARCHAR2(3 BYTE)         NOT NULL,
  RJ                   VARCHAR2(3 BYTE)         NOT NULL,
  HOT_OFFER            CHAR(1 BYTE),
  STATUS               VARCHAR2(20 BYTE),
  WHO_ADDED            NVARCHAR2(50),
  WHEN_ADDED           DATE,
  WHO_CHANGED          NVARCHAR2(50),
  WHEN_CHANGED         DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- PONUDA_PK  (Index) 
--
--  Dependencies: 
--   FLEX_OFFER (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.PONUDA_PK ON AP_DIJANA.FLEX_OFFER
(OFFER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_OFFER ADD (
  CONSTRAINT PONUDA_PK
  PRIMARY KEY
  (OFFER_ID)
  USING INDEX AP_DIJANA.PONUDA_PK
  ENABLE VALIDATE);



--
-- FLEX_OFFER_T  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_OFFER_T
(
  OFFER_ID         VARCHAR2(10 BYTE)            NOT NULL,
  APP_LANGUAGE_ID  NUMBER                       NOT NULL,
  HOT_OFFER        CHAR(1 BYTE),
  STATUS           VARCHAR2(20 BYTE),
  WHO_ADDED        NVARCHAR2(50),
  WHEN_ADDED       DATE,
  WHO_CHANGED      NVARCHAR2(50),
  WHEN_CHANGED     DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- OFFER_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_OFFER_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.OFFER_T_PK ON AP_DIJANA.FLEX_OFFER_T
(OFFER_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_OFFER_T ADD (
  CONSTRAINT OFFER_T_PK
  PRIMARY KEY
  (OFFER_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.OFFER_T_PK
  ENABLE VALIDATE);



--
-- FLEX_OFFER_USER  (Table) 
--
--  Dependencies: 
--   FLEX_OFFER (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_OFFER_USER
(
  OFFER_ID          VARCHAR2(10 BYTE),
  USER_ID           NUMBER,
  SELECTION_STATUS  VARCHAR2(10 BYTE),
  DATE_OF_ELECTION  DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- PONUDA_FLEXOVAC_PK  (Index) 
--
--  Dependencies: 
--   FLEX_OFFER_USER (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.PONUDA_FLEXOVAC_PK ON AP_DIJANA.FLEX_OFFER_USER
(OFFER_ID, USER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_OFFER_USER ADD (
  CONSTRAINT PONUDA_FLEXOVAC_PK
  PRIMARY KEY
  (OFFER_ID, USER_ID)
  USING INDEX AP_DIJANA.PONUDA_FLEXOVAC_PK
  ENABLE VALIDATE);



--
-- FLEX_OFFER_USER_T  (Table) 
--
--  Dependencies: 
--   FLEX_OFFER_T (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_OFFER_USER_T
(
  OFFER_ID          VARCHAR2(10 BYTE),
  APP_LANGUAGE_ID   NUMBER                      NOT NULL,
  USER_ID           NUMBER,
  SELECTION_STATUS  VARCHAR2(10 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_OFFER_USER_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_OFFER_USER_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_OFFER_USER_T_PK ON AP_DIJANA.FLEX_OFFER_USER_T
(OFFER_ID, USER_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_OFFER_USER_T ADD (
  CONSTRAINT FLEX_OFFER_USER_T_PK
  PRIMARY KEY
  (OFFER_ID, USER_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.FLEX_OFFER_USER_T_PK
  ENABLE VALIDATE);



--
-- FLEX_SANITARY_BOOKLET  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_SANITARY_BOOKLET
(
  SANITARY_ID  VARCHAR2(15 BYTE),
  VALID_FROM   DATE,
  VALID_TO     DATE,
  USER_ID      NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_SANITARY_BOOKLET_PK  (Index) 
--
--  Dependencies: 
--   FLEX_SANITARY_BOOKLET (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_SANITARY_BOOKLET_PK ON AP_DIJANA.FLEX_SANITARY_BOOKLET
(SANITARY_ID, USER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
--
-- SANITARNA_FLEXOVAC  (Index) 
--
--  Dependencies: 
--   FLEX_SANITARY_BOOKLET (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.SANITARNA_FLEXOVAC ON AP_DIJANA.FLEX_SANITARY_BOOKLET
(SANITARY_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_SANITARY_BOOKLET ADD (
  CONSTRAINT FLEX_SANITARY_BOOKLET_PK
  PRIMARY KEY
  (SANITARY_ID, USER_ID)
  USING INDEX AP_DIJANA.FLEX_SANITARY_BOOKLET_PK
  ENABLE VALIDATE);



--
-- FLEX_STATUS  (Table) 
--
--   Row Count: 1
CREATE TABLE AP_DIJANA.FLEX_STATUS
(
  SF_STATUS           VARCHAR2(3 BYTE),
  STATUS_DESCRIPTION  VARCHAR2(15 BYTE),
  TEST_KOLONA         VARCHAR2(6 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_STATUS_PK  (Index) 
--
--  Dependencies: 
--   FLEX_STATUS (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_STATUS_PK ON AP_DIJANA.FLEX_STATUS
(SF_STATUS)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_STATUS ADD (
  CONSTRAINT FLEX_STATUS_PK
  PRIMARY KEY
  (SF_STATUS)
  USING INDEX AP_DIJANA.FLEX_STATUS_PK
  ENABLE VALIDATE);



--
-- FLEX_STATUS_T  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_STATUS_T
(
  SF_STATUS           VARCHAR2(3 BYTE),
  APP_LANGUAGE_ID     NUMBER                    NOT NULL,
  STATUS_DESCRIPTION  VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_STATUS_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_STATUS_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_STATUS_T_PK ON AP_DIJANA.FLEX_STATUS_T
(SF_STATUS, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_STATUS_T ADD (
  CONSTRAINT FLEX_STATUS_T_PK
  PRIMARY KEY
  (SF_STATUS, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.FLEX_STATUS_T_PK
  ENABLE VALIDATE);



--
-- FLEX_STORE  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_STORE
(
  SF_POS  VARCHAR2(3 BYTE)                      NOT NULL,
  RJ      VARCHAR2(3 BYTE)                      NOT NULL
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- RADNJA_PK  (Index) 
--
--  Dependencies: 
--   FLEX_STORE (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.RADNJA_PK ON AP_DIJANA.FLEX_STORE
(SF_POS, RJ)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_STORE ADD (
  CONSTRAINT RADNJA_PK
  PRIMARY KEY
  (SF_POS, RJ)
  USING INDEX AP_DIJANA.RADNJA_PK
  ENABLE VALIDATE);



--
-- FLEX_TRAINING  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_TRAINING
(
  TRAINING_ID             VARCHAR2(15 BYTE),
  TRAINING_NAME           VARCHAR2(15 BYTE),
  DESCRIPTION             VARCHAR2(50 BYTE),
  DURATION_LENGTH_IN_MIN  NUMBER,
  VIDEO_URL               VARCHAR2(100 BYTE),
  DATE_OF_CREATION        DATE,
  MANDATORY_TRAINING      CHAR(1 BYTE),
  RUNS_FROM               DATE,
  RUNS_TO                 DATE,
  IS_ACTIVE               CHAR(1 BYTE),
  WHO_ADDED               NVARCHAR2(50),
  WHEN_ADDED              DATE,
  WHO_CHANGED             NVARCHAR2(50),
  WHEN_CHANGED            DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- OBUKE_PK  (Index) 
--
--  Dependencies: 
--   FLEX_TRAINING (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.OBUKE_PK ON AP_DIJANA.FLEX_TRAINING
(TRAINING_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_TRAINING ADD (
  CONSTRAINT OBUKE_PK
  PRIMARY KEY
  (TRAINING_ID)
  USING INDEX AP_DIJANA.OBUKE_PK
  ENABLE VALIDATE);



--
-- FLEX_TRAINING_T  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_TRAINING_T
(
  TRAINING_ID      VARCHAR2(15 BYTE),
  APP_LANGUAGE_ID  NUMBER                       NOT NULL,
  TRAINING_NAME    VARCHAR2(15 BYTE),
  DESCRIPTION      VARCHAR2(50 BYTE),
  DURATION_IN_MIN  NUMBER,
  VIDEO_URL        VARCHAR2(100 BYTE),
  IS_ACTIVE        CHAR(1 BYTE),
  WHO_ADDED        NVARCHAR2(50),
  WHEN_ADDED       DATE,
  WHO_CHANGED      NVARCHAR2(50),
  WHEN_CHANGED     DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- TRAINING_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_TRAINING_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.TRAINING_T_PK ON AP_DIJANA.FLEX_TRAINING_T
(TRAINING_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_TRAINING_T ADD (
  CONSTRAINT TRAINING_T_PK
  PRIMARY KEY
  (TRAINING_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.TRAINING_T_PK
  ENABLE VALIDATE);



--
-- FLEX_TRAINING_USER  (Table) 
--
--  Dependencies: 
--   FLEX_TRAINING (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_TRAINING_USER
(
  TRAINING_ID  VARCHAR2(15 BYTE),
  USER_ID      NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- OBUKA_FLEXOVAC_PK  (Index) 
--
--  Dependencies: 
--   FLEX_TRAINING_USER (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.OBUKA_FLEXOVAC_PK ON AP_DIJANA.FLEX_TRAINING_USER
(USER_ID, TRAINING_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_TRAINING_USER ADD (
  CONSTRAINT OBUKA_FLEXOVAC_PK
  PRIMARY KEY
  (USER_ID, TRAINING_ID)
  USING INDEX AP_DIJANA.OBUKA_FLEXOVAC_PK
  ENABLE VALIDATE);



--
-- FLEX_TYPE_CONTRACT_PARENT  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT
(
  SF_CONTRACT_PARENT  VARCHAR2(3 BYTE),
  CONTRACT_TYPE       VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- TIP_UGOVORA_PARENT_PK  (Index) 
--
--  Dependencies: 
--   FLEX_TYPE_CONTRACT_PARENT (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.TIP_UGOVORA_PARENT_PK ON AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT
(SF_CONTRACT_PARENT)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT ADD (
  CONSTRAINT TIP_UGOVORA_PARENT_PK
  PRIMARY KEY
  (SF_CONTRACT_PARENT)
  USING INDEX AP_DIJANA.TIP_UGOVORA_PARENT_PK
  ENABLE VALIDATE);



--
-- FLEX_TYPE_CONTRACT_PARENT_T  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T
(
  SF_CONTRACT_PARENT  VARCHAR2(3 BYTE),
  APP_LANGUAGE_ID     NUMBER                    NOT NULL,
  CONTRACT_TYPE       VARCHAR2(15 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_TYPE_CONTRACT_PARENT_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_TYPE_CONTRACT_PARENT_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T_PK ON AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T
(SF_CONTRACT_PARENT, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T ADD (
  CONSTRAINT FLEX_TYPE_CONTRACT_PARENT_T_PK
  PRIMARY KEY
  (SF_CONTRACT_PARENT, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T_PK
  ENABLE VALIDATE);



--
-- FLEX_USER  (Table) 
--
--  Dependencies: 
--   FLEX_STATUS (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_USER
(
  USER_ID                   NUMBER,
  EMAIL                     VARCHAR2(50 BYTE)   NOT NULL,
  PASSWORD                  VARCHAR2(200 BYTE)  NOT NULL,
  NAME                      VARCHAR2(50 BYTE)   NOT NULL,
  LAST_NAME                 VARCHAR2(50 BYTE)   NOT NULL,
  DATE_OF_BIRTH             DATE                NOT NULL,
  DATE_OF_BIRTH_CODE        VARCHAR2(8 BYTE)    NOT NULL,
  GENDER                    CHAR(1 BYTE),
  CITY_REAL                 VARCHAR2(50 BYTE)   NOT NULL,
  CITY_LK                   VARCHAR2(50 BYTE)   NOT NULL,
  ADDRESS_REAL              VARCHAR2(100 BYTE)  NOT NULL,
  ADDRESS_LK                VARCHAR2(100 BYTE)  NOT NULL,
  PHONE_NUMBER              VARCHAR2(50 BYTE)   NOT NULL,
  EMPLOYMENT_STATUS         VARCHAR2(50 BYTE),
  YC                        VARCHAR2(50 BYTE)   NOT NULL,
  COMPANY                   VARCHAR2(50 BYTE)   NOT NULL,
  TS_SIZE                   CHAR(1 BYTE)        NOT NULL,
  JMBG                      NUMBER,
  IS_ACCEPT_PRIVACY_POLICY  CHAR(1 BYTE),
  IS_ACCEPT_EMAIL_NOTIF     CHAR(1 BYTE),
  IS_ACCEPT_PUSH_NOTIF      CHAR(1 BYTE),
  IS_EMAIL_VERIFIED         CHAR(1 BYTE),
  PERSONAL_BARCODE          VARCHAR2(13 BYTE),
  IS_ACTIVE                 CHAR(1 BYTE)        NOT NULL,
  VIDEO_TRAINING            CHAR(1 BYTE),
  BZR_TRAINING              CHAR(1 BYTE),
  EMPLOYMENT                VARCHAR2(50 BYTE)   NOT NULL,
  SF_STATUS                 VARCHAR2(50 BYTE),
  WHO_CHANGED               NVARCHAR2(50),
  WHEN_CHANGED              DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


ALTER TABLE AP_DIJANA.FLEX_USER ADD (
  PRIMARY KEY
  (USER_ID)
  USING INDEX
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                PCTINCREASE      0
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);



--
-- FLEX_USER_CMS  (Table) 
--
--  Dependencies: 
--   FLEX_CMS_SUPPLIER (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_USER_CMS
(
  USER_CMS_ID                     NUMBER,
  USER_NAME                       NVARCHAR2(50) NOT NULL,
  PASSWORD                        NVARCHAR2(200),
  CMS_ROLE_ID                     NUMBER        NOT NULL,
  NAME                            NVARCHAR2(50),
  SURNAME                         NVARCHAR2(50),
  EMAIL                           NVARCHAR2(50) NOT NULL,
  CMS_SUPPLIER_ID                 NUMBER,
  ACTIVATION_CODE                 NVARCHAR2(100),
  IS_EMAIL_VERIFIED               CHAR(1 BYTE),
  IS_ACTIVE                       CHAR(1 BYTE)  NOT NULL,
  INVALID_LOGIN_ATTEMPT_COUNT     INTEGER,
  WHEN_LAST_INVALID_LOGIN_ATTEMP  DATE,
  IS_LOCKED                       CHAR(1 BYTE),
  WHEN_LOCKED                     DATE,
  IS_PARTICIPATE_IN_TEST          CHAR(1 BYTE),
  BLOCKED_FROM                    DATE,
  BLOCKED_TO                      DATE,
  IS_APPROVED                     CHAR(1 BYTE),
  WHEN_APPROVED                   DATE,
  WHO_APPROVED                    NVARCHAR2(50),
  EXECUTE_COMMAND                 NVARCHAR2(200),
  CREATION_DATE                   DATE,
  WHO_CHANGED                     NVARCHAR2(50),
  WHEN_CHANGED                    DATE,
  IS_INTERNAL                     CHAR(1 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_USER_CMS_PK  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_USER_CMS_PK ON AP_DIJANA.FLEX_USER_CMS
(USER_CMS_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
--
-- IX_FLEX_USER_CMS_EMAIL_UNIQUE  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.IX_FLEX_USER_CMS_EMAIL_UNIQUE ON AP_DIJANA.FLEX_USER_CMS
(UPPER("EMAIL"))
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
--
-- IX_FLEX_USER_CMS_USERNAME_UNIQUE  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.IX_FLEX_USER_CMS_USERNAME_UNIQUE ON AP_DIJANA.FLEX_USER_CMS
(UPPER("USER_NAME"))
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_USER_CMS ADD (
  CONSTRAINT FLEX_USER_CMS_PK
  PRIMARY KEY
  (USER_CMS_ID)
  USING INDEX AP_DIJANA.FLEX_USER_CMS_PK
  ENABLE VALIDATE);



--
-- FLEX_USER_CMS_T  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_USER_CMS_T
(
  USER_CMS_ID                  NUMBER,
  APP_LANGUAGE_ID              NUMBER,
  IS_EMAIL_VERIFIED            CHAR(1 BYTE),
  IS_ACTIVE                    CHAR(1 BYTE)     NOT NULL,
  INVALID_LOGIN_ATTEMPT_COUNT  INTEGER,
  IS_LOCKED                    CHAR(1 BYTE),
  IS_PARTICIPATE_IN_TEST       CHAR(1 BYTE),
  IS_APPROVED                  CHAR(1 BYTE),
  WHO_APPROVED                 NVARCHAR2(50),
  EXECUTE_COMMAND              NVARCHAR2(200),
  WHO_CHANGED                  NVARCHAR2(50),
  IS_INTERNAL                  CHAR(1 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_USER_CMS_PK_T  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_USER_CMS_PK_T ON AP_DIJANA.FLEX_USER_CMS_T
(USER_CMS_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_USER_CMS_T ADD (
  CONSTRAINT FLEX_USER_CMS_PK_T
  PRIMARY KEY
  (USER_CMS_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.FLEX_USER_CMS_PK_T
  ENABLE VALIDATE);



--
-- FLEX_USER_T  (Table) 
--
--  Dependencies: 
--   FLEX_STATUS_T (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_USER_T
(
  NAME                      VARCHAR2(50 BYTE)   NOT NULL,
  LAST_NAME                 VARCHAR2(50 BYTE)   NOT NULL,
  CITY_REAL                 VARCHAR2(50 BYTE)   NOT NULL,
  CITY_LK                   VARCHAR2(50 BYTE)   NOT NULL,
  ADDRESS_REAL              VARCHAR2(100 BYTE)  NOT NULL,
  ADDRESS_LK                VARCHAR2(100 BYTE)  NOT NULL,
  EMPLOYMENT_STATUS         VARCHAR2(50 BYTE),
  OZ                        VARCHAR2(50 BYTE)   NOT NULL,
  COMPANY                   VARCHAR2(50 BYTE)   NOT NULL,
  IS_ACCEPT_PRIVACY_POLICY  CHAR(1 BYTE),
  IS_ACCEPT_EMAIL_NOTIF     CHAR(1 BYTE),
  IS_ACCEPT_PUSH_NOTIF      CHAR(1 BYTE),
  IS_EMAIL_VERIFIED         CHAR(1 BYTE),
  IS_ACTIVE                 CHAR(1 BYTE)        NOT NULL,
  VIDEO_TRAINING            CHAR(1 BYTE),
  BZR_TRAINING              CHAR(1 BYTE),
  EMPLOYMENT                VARCHAR2(50 BYTE)   NOT NULL,
  SF_STATUS                 VARCHAR2(50 BYTE),
  WHO_CHANGED               NVARCHAR2(50),
  WHEN_CHANGED              DATE,
  USER_ID                   NUMBER,
  APP_LANGUAGE_ID           NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_USER_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_USER_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_USER_T_PK ON AP_DIJANA.FLEX_USER_T
(USER_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_USER_T ADD (
  CONSTRAINT FLEX_USER_T_PK
  PRIMARY KEY
  (USER_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.FLEX_USER_T_PK
  ENABLE VALIDATE);



--
-- FLEX_WEB_API_ENDPOINT  (Table) 
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_WEB_API_ENDPOINT
(
  WEB_API_ENDPOINT_ID        NUMBER             NOT NULL,
  ENDPOINT_NAME              NVARCHAR2(50),
  ENDPOINT_DESCRIPTION       NVARCHAR2(100),
  HOST                       NVARCHAR2(50),
  PORT                       NVARCHAR2(10),
  PATH                       NVARCHAR2(500)     NOT NULL,
  HTTP_METHOD                NVARCHAR2(10)      NOT NULL,
  CONTROLLER_NAME            NVARCHAR2(500),
  ACTION_NAME                NVARCHAR2(500),
  IS_ONLY_FOR_AUTHENTICATED  CHAR(1 BYTE)       NOT NULL,
  IS_ONLY_FOR_INTERNAL       CHAR(1 BYTE)       NOT NULL,
  IS_ACTIVE                  CHAR(1 BYTE)       NOT NULL,
  CREATION_DATE              DATE               NOT NULL,
  WHO_CHANGED                NVARCHAR2(50)      NOT NULL,
  WHEN_CHANGED               DATE               NOT NULL
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- IX_FLEX_USER_CMS_EMAIL  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE INDEX AP_DIJANA.IX_FLEX_USER_CMS_EMAIL ON AP_DIJANA.FLEX_USER_CMS
(EMAIL)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- IX_FLEX_USER_CMS_EMAIL_LOWER  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE INDEX AP_DIJANA.IX_FLEX_USER_CMS_EMAIL_LOWER ON AP_DIJANA.FLEX_USER_CMS
(LOWER("EMAIL"))
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- IX_FLEX_USER_CMS_NAME_LOWER  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE INDEX AP_DIJANA.IX_FLEX_USER_CMS_NAME_LOWER ON AP_DIJANA.FLEX_USER_CMS
(LOWER("USER_NAME"))
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- IX_FLEX_USER_CMS_USER_NAME  (Index) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--
CREATE INDEX AP_DIJANA.IX_FLEX_USER_CMS_USER_NAME ON AP_DIJANA.FLEX_USER_CMS
(USER_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- GENERISI_JSON_DOCUMENT  (Procedure) 
--
--  Dependencies: 
--   "BIN$GcAPC1uGAUjgYwqhCylrYg==$0" (Table)
--   "BIN$GcAPC1uJAUjgYwqhCylrYg==$0" (Table)
--   DBMS_OUTPUT (Synonym)
--   UTL_FILE (Synonym)
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--
CREATE OR REPLACE PROCEDURE AP_DIJANA.generisi_JSON_DOCUMENT(
    SF_POS_dok VARCHAR2,
    RJ_dok VARCHAR2,
    SF_TIP_dok2 VARCHAR2,
    DOKUMENT_dok VARCHAR2
) AS
    file_handle UTL_FILE.FILE_TYPE;
    file_name VARCHAR2(100);
    json_data CLOB;
BEGIN
    -- Generate JSON data
    SELECT 
        json_serialize(
            json_object (dok.SF_POS, dok.RJ ,dok.SF_TIP_DOK, dok.DOKUMENT,dok.SF_PODTIP_DOK,dok.IME_OP,dok.SF_RAD, dok.DAT_FORM,
  dok.DAT_DOK,dok.DAT_DPO ,dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, dok.SF_TIP_DOK_2, dok.DOKUMENT_2,
  dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV,
  dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED,
  dok.ORG_NVRED, dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA,  dok.TROSKOVI, dok.BR_STAVKI,  
  dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST,  dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, dok.REALIZOVANO, 
  dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO,
                'dokument_stavke' VALUE (
                    SELECT 
                        JSON_ARRAYAGG(
                            json_object (ds.SF_POS, ds.RJ, ds.SF_TIP_DOK, ds.DOKUMENT, ds.STAVKA, ds.RBR, ds.SF_ART, ds.KOLICINA, 
                                         ds.REALIZOVANO, ds.NAB_VRED, ds.OSN_PCENA, ds.PROD_CENA, ds.DEV_NVRED, ds.ORG_NVRED, 
                                         ds.DEV_PCENA, ds.DAT_ROK, ds.RABAT, ds.MARZA, ds.POREZ, ds.PREN_POREZ, ds.POREZ_MARZA, 
                                         ds.FAKT_VRED, ds.TROSAK, ds.OSN_NCENA, ds.NAB_RABAT_P, ds.SF_ART_PRO, ds.PROD_VRED, 
                                         ds.M_DOKUMENT, ds.ODOBRENO, ds.INT_NVRED, ds.KOMADA, ds.SF_KOM_DOB, ds.LOT, ds.ZA_PROMET, 
                                         ds.SF_POPUST, ds.SF_RNR
                            returning clob)
                        returning clob) 
                    FROM ap_dijana.dokument_stavke ds
                    WHERE ds.SF_POS = dok.SF_POS AND ds.RJ = dok.RJ AND ds.SF_TIP_DOK = dok.SF_TIP_DOK AND ds.DOKUMENT = dok.DOKUMENT
                ) returning clob
            ) RETURNING CLOB PRETTY
        ) INTO json_data 
    FROM ap_dijana.dokument dok
    WHERE dok.SF_POS = SF_POS_dok AND dok.RJ = RJ_dok AND dok.SF_TIP_DOK = SF_TIP_DOK2 AND dok.DOKUMENT = DOKUMENT_dok;

    -- Generate file name with current date
    file_name := 'json_' || SF_POS_dok || '_' || RJ_dok || '_' || SF_TIP_dok2 || '_' || DOKUMENT_dok || '.json';


    -- Open the file for writing
    file_handle := UTL_FILE.FOPEN('DOKUMENT_JSON_TEST', file_name, 'W');

    -- Write the JSON data to the file
    UTL_FILE.PUT_LINE(file_handle, json_data);

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);
    
    -- Display a message indicating successful execution
    DBMS_OUTPUT.PUT_LINE('Procedure executed successfully.');

EXCEPTION
    WHEN OTHERS THEN
        IF UTL_FILE.IS_OPEN(file_handle) THEN
            UTL_FILE.FCLOSE(file_handle);
        END IF;
        RAISE;
END;
/


--
-- KREIRAJ_JSON_DOCUMENT  (Procedure) 
--
--  Dependencies: 
--   DOKUMENT (Table)
--   DOKUMENT_STAVKE (Table)
--   STANDARD (Package)
--
CREATE OR REPLACE procedure AP_DIJANA.kreiraj_JSON_DOCUMENT(
  SF_POS_dok VARCHAR2,
  RJ_dok VARCHAR2,
  SF_TIP_dok2 VARCHAR2,
  DOKUMENT_dok VARCHAR2
) AS
begin

select json_serialize(
            json_object (dok.SF_POS, dok.RJ ,dok.SF_TIP_DOK, dok.DOKUMENT,dok.SF_PODTIP_DOK,dok.IME_OP,dok.SF_RAD, dok.DAT_FORM,
  dok.DAT_DOK,dok.DAT_DPO ,dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, dok.SF_TIP_DOK_2, dok.DOKUMENT_2,
  dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV,
  dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED,
  dok.ORG_NVRED, dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA,  dok.TROSKOVI, dok.BR_STAVKI,  
  dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST,  dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, dok.REALIZOVANO, 
  dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO,
                'dokument_stavke' value JSON_ARRAYAGG(
                    json_object (ds.*) returning clob
                ) 
            returning clob
            )
            returning clob pretty
        ) as dataJSON 
    FROM  maxi_2024.dokument dok, maxi_2024.dokument_stavke ds
    where  dok.SF_POS=ds.SF_POS and dok.RJ=ds.RJ and dok.SF_TIP_DOK=ds.SF_TIP_DOK and dok.DOKUMENT=ds.DOKUMENT
    and dok.SF_POS=SF_POS_dok and dok.RJ=RJ_dok and dok.SF_TIP_DOK=SF_TIP_DOK2 and dok.DOKUMENT=DOKUMENT_dok
group  by dok.SF_POS, dok.RJ ,dok.SF_TIP_DOK, dok.DOKUMENT,dok.SF_PODTIP_DOK,dok.IME_OP,dok.SF_RAD, dok.DAT_FORM,
  dok.DAT_DOK,dok.DAT_DPO ,dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, dok.SF_TIP_DOK_2, dok.DOKUMENT_2,
  dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV,
  dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED,
  dok.ORG_NVRED, dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA,  dok.TROSKOVI, dok.BR_STAVKI,  
  dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST,  dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, dok.REALIZOVANO, 
  dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO;
end;
/


--
-- KREIRAJ_JSON_DOCUMENT_TEST  (Procedure) 
--
--  Dependencies: 
--   "BIN$GcAPC1uGAUjgYwqhCylrYg==$0" (Table)
--   "BIN$GcAPC1uJAUjgYwqhCylrYg==$0" (Table)
--   UTL_FILE (Synonym)
--   STANDARD (Package)
--
CREATE OR REPLACE procedure AP_DIJANA.kreiraj_JSON_DOCUMENT_test(
  SF_POS_dok VARCHAR2,
  RJ_dok VARCHAR2,
  SF_TIP_dok2 VARCHAR2,
  DOKUMENT_dok VARCHAR2
) AS
begin

select json_serialize(
            json_object (dok.SF_POS, dok.RJ ,dok.SF_TIP_DOK, dok.DOKUMENT,dok.SF_PODTIP_DOK,dok.IME_OP,dok.SF_RAD, dok.DAT_FORM,
  dok.DAT_DOK,dok.DAT_DPO ,dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, dok.SF_TIP_DOK_2, dok.DOKUMENT_2,
  dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV,
  dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED,
  dok.ORG_NVRED, dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA,  dok.TROSKOVI, dok.BR_STAVKI,  
  dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST,  dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, dok.REALIZOVANO, 
  dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO,
                'dokument_stavke' value JSON_ARRAYAGG(
                    json_object (ds.*) returning clob
                ) 
            returning clob
            )
            returning clob pretty
        ) into dataJSON 
    FROM  AP_DIJANA.dokument dok, AP_DIJANA.dokument_stavke ds
    where  dok.SF_POS=ds.SF_POS and dok.RJ=ds.RJ and dok.SF_TIP_DOK=ds.SF_TIP_DOK and dok.DOKUMENT=ds.DOKUMENT
    and dok.SF_POS=SF_POS_dok and dok.RJ=RJ_dok and dok.SF_TIP_DOK=SF_TIP_DOK2 and dok.DOKUMENT=DOKUMENT_dok
group  by dok.SF_POS, dok.RJ ,dok.SF_TIP_DOK, dok.DOKUMENT,dok.SF_PODTIP_DOK,dok.IME_OP,dok.SF_RAD, dok.DAT_FORM,
  dok.DAT_DOK,dok.DAT_DPO ,dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, dok.SF_TIP_DOK_2, dok.DOKUMENT_2,
  dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV,
  dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED,
  dok.ORG_NVRED, dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA,  dok.TROSKOVI, dok.BR_STAVKI,  
  dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST,  dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, dok.REALIZOVANO, 
  dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO;
  
   -- Generate file name with current date (change the directory path as needed)
    file_name := 'json 1' || '.json';

    -- Open the file for writing (change the directory path as needed)
    file_handle := UTL_FILE.FOPEN('C:\Users\PRS01J21\OneDrive - AholdDelhaize.com\Desktop\Dijana', file_name, 'W');

    -- Write the JSON data to the file
    UTL_FILE.PUT_LINE(file_handle, json_data);

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);
EXCEPTION
    WHEN OTHERS THEN
        IF UTL_FILE.IS_OPEN(file_handle) THEN
            UTL_FILE.FCLOSE(file_handle);
        END IF;
        RAISE;
end;
/


--
-- KREIRAJ_JSON_DOCUMENT_TEST2  (Procedure) 
--
--  Dependencies: 
--   "BIN$GcAPC1uGAUjgYwqhCylrYg==$0" (Table)
--   "BIN$GcAPC1uJAUjgYwqhCylrYg==$0" (Table)
--   DBMS_OUTPUT (Synonym)
--   UTL_FILE (Synonym)
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--
CREATE OR REPLACE PROCEDURE AP_DIJANA.kreiraj_JSON_DOCUMENT_test2(
    SF_POS_dok VARCHAR2,
    RJ_dok VARCHAR2,
    SF_TIP_dok2 VARCHAR2,
    DOKUMENT_dok VARCHAR2
) AS
    file_handle UTL_FILE.FILE_TYPE;
    file_name VARCHAR2(100);
    json_data CLOB;
BEGIN
    -- Generate JSON data
    SELECT 
        json_serialize(
            json_object (
                'dok' VALUE (
                    SELECT 
                        JSON_ARRAYAGG(
                            json_object (ds.SF_POS, ds.RJ, ds.SF_TIP_DOK, ds.DOKUMENT, ds.STAVKA, ds.RBR, ds.SF_ART, ds.KOLICINA, 
                                         ds.REALIZOVANO, ds.NAB_VRED, ds.OSN_PCENA, ds.PROD_CENA, ds.DEV_NVRED, ds.ORG_NVRED, 
                                         ds.DEV_PCENA, ds.DAT_ROK, ds.RABAT, ds.MARZA, ds.POREZ, ds.PREN_POREZ, ds.POREZ_MARZA, 
                                         ds.FAKT_VRED, ds.TROSAK, ds.OSN_NCENA, ds.NAB_RABAT_P, ds.SF_ART_PRO, ds.PROD_VRED, 
                                         ds.M_DOKUMENT, ds.ODOBRENO, ds.INT_NVRED, ds.KOMADA, ds.SF_KOM_DOB, ds.LOT, ds.ZA_PROMET, 
                                         ds.SF_POPUST, ds.SF_RNR
                            returning clob)
                        returning clob) 
                    FROM ap_dijana.dokument_stavke ds
                    WHERE ds.SF_POS = dok.SF_POS AND ds.RJ = dok.RJ AND ds.SF_TIP_DOK = dok.SF_TIP_DOK AND ds.DOKUMENT = dok.DOKUMENT
                ) returning clob
            ) RETURNING CLOB PRETTY
        ) INTO json_data 
    FROM ap_dijana.dokument dok
    WHERE dok.SF_POS = SF_POS_dok AND dok.RJ = RJ_dok AND dok.SF_TIP_DOK = SF_TIP_DOK2 AND dok.DOKUMENT = DOKUMENT_dok;

    -- Generate file name with current date (change the directory path as needed)
    file_name := 'json1_' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '.json';

    -- Open the file for writing
    file_handle := UTL_FILE.FOPEN('DOKUMENT_JSON_TEST', file_name, 'W');

    -- Write the JSON data to the file
    UTL_FILE.PUT_LINE(file_handle, json_data);

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);
    
    -- Display a message indicating successful execution
    DBMS_OUTPUT.PUT_LINE('Procedure executed successfully.');

EXCEPTION
    WHEN OTHERS THEN
        IF UTL_FILE.IS_OPEN(file_handle) THEN
            UTL_FILE.FCLOSE(file_handle);
        END IF;
        RAISE;
END;
/


--
-- KREIRAJ_JSON_DOCUMENT_TEST3  (Procedure) 
--
CREATE OR REPLACE PROCEDURE AP_DIJANA.kreiraj_JSON_DOCUMENT_test3(
    SF_POS_dok VARCHAR2,
    RJ_dok VARCHAR2,
    SF_TIP_dok2 VARCHAR2,
    DOKUMENT_dok VARCHAR2
) AS
    file_handle UTL_FILE.FILE_TYPE;
    file_name VARCHAR2(100);
    json_data CLOB;
BEGIN
    -- Generate JSON data
    SELECT 
        json_serialize(
            json_object (dok.SF_POS, dok.RJ, dok.SF_TIP_DOK, dok.DOKUMENT, dok.SF_PODTIP_DOK, dok.IME_OP, dok.SF_RAD, dok.DAT_FORM,
                         dok.DAT_DOK, dok.DAT_DPO, dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, 
                         dok.SF_TIP_DOK_2, dok.DOKUMENT_2, dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, 
                         dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV, dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, 
                         dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED, dok.ORG_NVRED, 
                         dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA, dok.TROSKOVI, dok.BR_STAVKI, 
                         dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST, dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, 
                         dok.REALIZOVANO, dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO,
                         'dokument_stavke' VALUE JSON_ARRAYAGG(
                             json_object (ds.SF_POS, ds.RJ, ds.SF_TIP_DOK, ds.DOKUMENT, ds.STAVKA, ds.RBR, ds.SF_ART, ds.KOLICINA, 
                                          ds.REALIZOVANO, ds.NAB_VRED, ds.OSN_PCENA, ds.PROD_CENA, ds.DEV_NVRED, ds.ORG_NVRED, 
                                          ds.DEV_PCENA, ds.DAT_ROK, ds.RABAT, ds.MARZA, ds.POREZ, ds.PREN_POREZ, ds.POREZ_MARZA, 
                                          ds.FAKT_VRED, ds.TROSAK, ds.OSN_NCENA, ds.NAB_RABAT_P, ds.SF_ART_PRO, ds.PROD_VRED, 
                                          ds.M_DOKUMENT, ds.ODOBRENO, ds.INT_NVRED, ds.KOMADA, ds.SF_KOM_DOB, ds.LOT, ds.ZA_PROMET, 
                                          ds.SF_POPUST, ds.SF_RNR
                             ) RETURNING CLOB
                         ) 
            RETURNING CLOB
        ) INTO json_data 
    FROM 
        ap_dijana.dokument dok 
        JOIN ap_dijana.dokument_stavke ds 
        ON dok.SF_POS = ds.SF_POS 
           AND dok.RJ = ds.RJ 
           AND dok.SF_TIP_DOK = ds.SF_TIP_DOK 
           AND dok.DOKUMENT = ds.DOKUMENT
    WHERE 
        dok.SF_POS = SF_POS_dok 
        AND dok.RJ = RJ_dok 
        AND dok.SF_TIP_DOK = SF_TIP_DOK2 
        AND dok.DOKUMENT = DOKUMENT_dok;

    -- Format the JSON data nicely
    json_data := JSON_PRETTY(json_data);
    
    -- Generate file name with current date (change the directory path as needed)
    file_name := 'json1_' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '.json';

    -- Open the file for writing
    file_handle := UTL_FILE.FOPEN('C:\Users\PRS01J21\OneDrive - AholdDelhaize.com\Desktop\Dijana', file_name, 'W');

    -- Write the JSON data to the file
    UTL_FILE.PUT_LINE(file_handle, json_data);

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);
    
    -- Display a message indicating successful execution
    DBMS_OUTPUT.PUT_LINE('Procedure executed successfully.');

EXCEPTION
    WHEN OTHERS THEN
        IF UTL_FILE.IS_OPEN(file_handle) THEN
            UTL_FILE.FCLOSE(file_handle);
        END IF;
        RAISE;
END;
/


--
-- KREIRAJ_JSON_DOCUMENT_TEST4  (Procedure) 
--
--  Dependencies: 
--   "BIN$GcAPC1uGAUjgYwqhCylrYg==$0" (Table)
--   "BIN$GcAPC1uJAUjgYwqhCylrYg==$0" (Table)
--   DBMS_OUTPUT (Synonym)
--   UTL_FILE (Synonym)
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--
CREATE OR REPLACE PROCEDURE AP_DIJANA.kreiraj_JSON_DOCUMENT_test4(
    SF_POS_dok VARCHAR2,
    RJ_dok VARCHAR2,
    SF_TIP_dok2 VARCHAR2,
    DOKUMENT_dok VARCHAR2
) AS
    file_handle UTL_FILE.FILE_TYPE;
    file_name VARCHAR2(100);
    json_data CLOB;
BEGIN
    -- Generate JSON data
    SELECT 
        json_serialize(
            json_object (dok.SF_POS, dok.RJ ,dok.SF_TIP_DOK, dok.DOKUMENT,dok.SF_PODTIP_DOK,dok.IME_OP,dok.SF_RAD, dok.DAT_FORM,
  dok.DAT_DOK,dok.DAT_DPO ,dok.SF_POS_2, dok.RJ_2, dok.SF_KOM, dok.SF_KPOS, dok.IZJAVA, dok.DAT_IZJ, dok.SF_TIP_DOK_2, dok.DOKUMENT_2,
  dok.IZNOS_DOK_2, dok.MAG_DOK, dok.OTPREMNICA, dok.UGOVOR, dok.JCI, dok.MARZA_P, dok.RABAT_P, dok.RABAT, dok.POPUST, dok.SF_DEV,
  dok.DEV_KURS, dok.NAPOMENA, dok.ZAVRSENO, dok.STORNIRA, dok.SF_TIP_NAL, dok.NALOG, dok.OSN_PVRED, dok.PROD_VRED, dok.DEV_NVRED,
  dok.ORG_NVRED, dok.MALOPRODAJA, dok.IMA_POREZ, dok.POREZ, dok.PREN_POREZ, dok.POREZ_MARZA,  dok.TROSKOVI, dok.BR_STAVKI,  
  dok.UVODNI_TEKST, dok.ZAVRSNI_TEKST,  dok.OZNAKA, dok.OTPREMLJENO, dok.SF_VZC, dok.SF_VZL, dok.DAT_SLANJA, dok.REALIZOVANO, 
  dok.M_TIP_DOK, dok.M_NAZIV, dok.M_DOKUMENT, dok.M_SF_KOM, dok.OBRADJENO,
                'dok' VALUE (
                    SELECT 
                        JSON_ARRAYAGG(
                            json_object (ds.SF_POS, ds.RJ, ds.SF_TIP_DOK, ds.DOKUMENT, ds.STAVKA, ds.RBR, ds.SF_ART, ds.KOLICINA, 
                                         ds.REALIZOVANO, ds.NAB_VRED, ds.OSN_PCENA, ds.PROD_CENA, ds.DEV_NVRED, ds.ORG_NVRED, 
                                         ds.DEV_PCENA, ds.DAT_ROK, ds.RABAT, ds.MARZA, ds.POREZ, ds.PREN_POREZ, ds.POREZ_MARZA, 
                                         ds.FAKT_VRED, ds.TROSAK, ds.OSN_NCENA, ds.NAB_RABAT_P, ds.SF_ART_PRO, ds.PROD_VRED, 
                                         ds.M_DOKUMENT, ds.ODOBRENO, ds.INT_NVRED, ds.KOMADA, ds.SF_KOM_DOB, ds.LOT, ds.ZA_PROMET, 
                                         ds.SF_POPUST, ds.SF_RNR
                            returning clob)
                        returning clob) 
                    FROM ap_dijana.dokument_stavke ds
                    WHERE ds.SF_POS = dok.SF_POS AND ds.RJ = dok.RJ AND ds.SF_TIP_DOK = dok.SF_TIP_DOK AND ds.DOKUMENT = dok.DOKUMENT
                ) returning clob
            ) RETURNING CLOB PRETTY
        ) INTO json_data 
    FROM ap_dijana.dokument dok
    WHERE dok.SF_POS = SF_POS_dok AND dok.RJ = RJ_dok AND dok.SF_TIP_DOK = SF_TIP_DOK2 AND dok.DOKUMENT = DOKUMENT_dok;

    -- Generate file name with current date (change the directory path as needed)
    file_name := 'json1_' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '.json';

    -- Open the file for writing
    file_handle := UTL_FILE.FOPEN('DOKUMENT_JSON_TEST', file_name, 'W');

    -- Write the JSON data to the file
    UTL_FILE.PUT_LINE(file_handle, json_data);

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);
    
    -- Display a message indicating successful execution
    DBMS_OUTPUT.PUT_LINE('Procedure executed successfully.');

EXCEPTION
    WHEN OTHERS THEN
        IF UTL_FILE.IS_OPEN(file_handle) THEN
            UTL_FILE.FCLOSE(file_handle);
        END IF;
        RAISE;
END;
/


--
-- UCITAJ_JSON_DOCUMENT  (Procedure) 
--
--  Dependencies: 
--   "BIN$GcAPC1uGAUjgYwqhCylrYg==$0" (Table)
--   "BIN$GcAPC1uJAUjgYwqhCylrYg==$0" (Table)
--   DBMS_OUTPUT (Synonym)
--   UTL_FILE (Synonym)
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--
CREATE OR REPLACE procedure AP_DIJANA.ucitaj_JSON_DOCUMENT
IS
    file_location VARCHAR2(255) := '/u02/DijanaTest';
    file_handle UTL_FILE.FILE_TYPE;
    file_data CLOB;
    buffer VARCHAR2(32767); -- Buffer size
BEGIN

 -- Open the JSON file
    file_handle := UTL_FILE.FOPEN('DOKUMENT_JSON_TEST', 'json_216_925_01_5.json', 'R');

    -- Read data from the file and append it to the CLOB variable file_data
    LOOP
        BEGIN
            UTL_FILE.GET_LINE(file_handle, buffer);
            file_data := file_data || buffer;      -- Assign the JSON data to the CLOB variable
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                EXIT;
        END;
    END LOOP;

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);

    
    -- Now we have the JSON data in the file_data CLOB variable
    -- We can proceed to parse and process this JSON data dynamically
    
    -- Extracting data from the main document : DOKUMENT
    FOR main_rec IN (
        SELECT *
        FROM JSON_TABLE(file_data, '$[*]' COLUMNS (
            SF_POS VARCHAR2(50) PATH '$.SF_POS',
            RJ VARCHAR2(50) PATH '$.RJ',
            SF_TIP_DOK VARCHAR2(50) PATH '$.SF_TIP_DOK',
            DOKUMENT VARCHAR2(50) PATH '$.DOKUMENT',
            SF_PODTIP_DOK VARCHAR2(50) PATH '$.SF_PODTIP_DOK',
            IME_OP VARCHAR2(50) PATH '$.IME_OP',
            SF_RAD VARCHAR2(50) PATH '$.SF_RAD',
            DAT_FORM VARCHAR2(50) PATH '$.DAT_FORM',
            DAT_DOK VARCHAR2(50) PATH '$.DAT_DOK',
            DAT_DPO VARCHAR2(50) PATH '$.DAT_DPO',
            SF_POS_2 VARCHAR2(50) PATH '$.SF_POS_2',
            RJ_2 VARCHAR2(50) PATH '$.RJ_2',
            SF_KOM NUMBER PATH '$.SF_KOM',
            SF_KPOS VARCHAR2(50) PATH '$.SF_KPOS',
            IZJAVA VARCHAR2(50) PATH '$.IZJAVA',
            DAT_IZJ VARCHAR2(50) PATH '$.DAT_IZJ',
            SF_TIP_DOK_2 VARCHAR2(50) PATH '$.SF_TIP_DOK_2',
            DOKUMENT_2 VARCHAR2(50) PATH '$.DOKUMENT_2',
            IZNOS_DOK_2 NUMBER PATH '$.IZNOS_DOK_2',
            MAG_DOK VARCHAR2(50) PATH '$.MAG_DOK',
            OTPREMNICA VARCHAR2(50) PATH '$.OTPREMNICA',
            UGOVOR VARCHAR2(50) PATH '$.UGOVOR',
            JCI VARCHAR2(50) PATH '$.JCI',
            MARZA_P NUMBER PATH '$.MARZA_P',
            RABAT_P NUMBER PATH '$.RABAT_P',
            RABAT NUMBER PATH '$.RABAT',
            POPUST NUMBER PATH '$.POPUST',
            SF_DEV VARCHAR2(50) PATH '$.SF_DEV',
            DEV_KURS VARCHAR2(50) PATH '$.DEV_KURS',
            NAPOMENA VARCHAR2(50) PATH '$.NAPOMENA',
            ZAVRSENO NUMBER PATH '$.ZAVRSENO',
            STORNIRA NUMBER PATH '$.STORNIRA',
            SF_TIP_NAL VARCHAR2(50) PATH '$.SF_TIP_NAL',
            NALOG VARCHAR2(50) PATH '$.NALOG',
            OSN_PVRED NUMBER PATH '$.OSN_PVRED',
            PROD_VRED NUMBER PATH '$.PROD_VRED',
            DEV_NVRED NUMBER PATH '$.DEV_NVRED',
            ORG_NVRED NUMBER PATH '$.ORG_NVRED',
            MALOPRODAJA NUMBER PATH '$.MALOPRODAJA',
            IMA_POREZ NUMBER PATH '$.IMA_POREZ',
            POREZ NUMBER PATH '$.POREZ',
            PREN_POREZ NUMBER PATH '$.PREN_POREZ',
            POREZ_MARZA NUMBER PATH '$.POREZ_MARZA',
            TROSKOVI NUMBER PATH '$.TROSKOVI',
            BR_STAVKI NUMBER PATH '$.BR_STAVKI',
            UVODNI_TEKST VARCHAR2(4000) PATH '$.UVODNI_TEKST',
            ZAVRSNI_TEKST VARCHAR2(4000) PATH '$.ZAVRSNI_TEKST',
            OZNAKA VARCHAR2(50) PATH '$.OZNAKA',
            OTPREMLJENO VARCHAR2(50) PATH '$.OTPREMLJENO',
            SF_VZC VARCHAR2(50) PATH '$.SF_VZC',
            SF_VZL VARCHAR2(50) PATH '$.SF_VZL',
            DAT_SLANJA VARCHAR2(50) PATH '$.DAT_SLANJA',
            REALIZOVANO VARCHAR2(50) PATH '$.REALIZOVANO',
            M_TIP_DOK VARCHAR2(50) PATH '$.M_TIP_DOK',
            M_NAZIV VARCHAR2(50) PATH '$.M_NAZIV',
            M_DOKUMENT VARCHAR2(50) PATH '$.M_DOKUMENT',
            M_SF_KOM VARCHAR2(50) PATH '$.M_SF_KOM',
            OBRADJENO VARCHAR2(50) PATH '$.OBRADJENO'
        )) 
    ) 
    LOOP
        -- Insert data into the DOKUMENT table
        INSERT INTO AP_DIJANA.DOKUMENT (
            SF_POS,
            RJ,
            SF_TIP_DOK,
            DOKUMENT,
            SF_PODTIP_DOK,
            IME_OP,
            SF_RAD,
            DAT_FORM,
            DAT_DOK,
            DAT_DPO,
            SF_POS_2,
            RJ_2,
            SF_KOM,
            SF_KPOS,
            IZJAVA,
            DAT_IZJ,
            SF_TIP_DOK_2,
            DOKUMENT_2,
            IZNOS_DOK_2,
            MAG_DOK,
            OTPREMNICA,
            UGOVOR,
            JCI,
            MARZA_P,
            RABAT_P,
            RABAT,
            POPUST,
            SF_DEV,
            DEV_KURS,
            NAPOMENA,
            ZAVRSENO,
            STORNIRA,
            SF_TIP_NAL,
            NALOG,
            OSN_PVRED,
            PROD_VRED,
            DEV_NVRED,
            ORG_NVRED,
            MALOPRODAJA,
            IMA_POREZ,
            POREZ,
            PREN_POREZ,
            POREZ_MARZA,
            TROSKOVI,
            BR_STAVKI,
            UVODNI_TEKST,
            ZAVRSNI_TEKST,
            OZNAKA,
            OTPREMLJENO,
            SF_VZC,
            SF_VZL,
            DAT_SLANJA,
            REALIZOVANO,
            M_TIP_DOK,
            M_NAZIV,
            M_DOKUMENT,
            M_SF_KOM,
            OBRADJENO
        ) VALUES (
            main_rec.SF_POS,
            main_rec.RJ,
            main_rec.SF_TIP_DOK,
            main_rec.DOKUMENT,
            main_rec.SF_PODTIP_DOK,
            main_rec.IME_OP,
            main_rec.SF_RAD,
            TO_DATE(main_rec.DAT_FORM, 'YYYY-MM-DD"T"HH24:MI:SS'),
            TO_DATE(main_rec.DAT_DOK, 'YYYY-MM-DD"T"HH24:MI:SS'),
            TO_DATE(main_rec.DAT_DPO, 'YYYY-MM-DD"T"HH24:MI:SS'),
            main_rec.SF_POS_2,
            main_rec.RJ_2,
            main_rec.SF_KOM,
            main_rec.SF_KPOS,
            main_rec.IZJAVA,
            main_rec.DAT_IZJ,
            main_rec.SF_TIP_DOK_2,
            main_rec.DOKUMENT_2,
            main_rec.IZNOS_DOK_2,
            main_rec.MAG_DOK,
            main_rec.OTPREMNICA,
            main_rec.UGOVOR,
            main_rec.JCI,
            main_rec.MARZA_P,
            main_rec.RABAT_P,
            main_rec.RABAT,
            main_rec.POPUST,
            main_rec.SF_DEV,
            main_rec.DEV_KURS,
            main_rec.NAPOMENA,
            main_rec.ZAVRSENO,
            main_rec.STORNIRA,
            main_rec.SF_TIP_NAL,
            main_rec.NALOG,
            main_rec.OSN_PVRED,
            main_rec.PROD_VRED,
            main_rec.DEV_NVRED,
            main_rec.ORG_NVRED,
            main_rec.MALOPRODAJA,
            main_rec.IMA_POREZ,
            main_rec.POREZ,
            main_rec.PREN_POREZ,
            main_rec.POREZ_MARZA,
            main_rec.TROSKOVI,
            main_rec.BR_STAVKI,
            main_rec.UVODNI_TEKST,
            main_rec.ZAVRSNI_TEKST,
            main_rec.OZNAKA,
            main_rec.OTPREMLJENO,
            main_rec.SF_VZC,
            main_rec.SF_VZL,
            main_rec.DAT_SLANJA,
            main_rec.REALIZOVANO,
            main_rec.M_TIP_DOK,
            main_rec.M_NAZIV,
            main_rec.M_DOKUMENT,
            main_rec.M_SF_KOM,
            main_rec.OBRADJENO
        );
        DBMS_OUTPUT.PUT_LINE('Upisano u DOKUMENT.');
         -- Display the JSON data
        DBMS_OUTPUT.PUT_LINE(file_data);
        --Extracting data from items inside the main document : DOKUMENT_STAVKE
        -- Extracting data from items inside the main document : DOKUMENT_STAVKE
        FOR item_rec IN (
            SELECT *
            FROM JSON_TABLE(file_data, '$.dokument_stavke[*]' COLUMNS (
                SF_POS VARCHAR2(50) PATH '$.SF_POS',
                RJ VARCHAR2(50) PATH '$.RJ',
                SF_TIP_DOK VARCHAR2(50) PATH '$.SF_TIP_DOK',
                DOKUMENT VARCHAR2(50) PATH '$.DOKUMENT',
                STAVKA NUMBER PATH '$.STAVKA',
                RBR NUMBER PATH '$.RBR',
                SF_ART VARCHAR2(50) PATH '$.SF_ART',
                KOLICINA NUMBER PATH '$.KOLICINA',
                REALIZOVANO NUMBER PATH '$.REALIZOVANO',
                NAB_VRED NUMBER PATH '$.NAB_VRED',
                OSN_PCENA NUMBER PATH '$.OSN_PCENA',
                PROD_CENA NUMBER PATH '$.PROD_CENA',
                DEV_NVRED NUMBER PATH '$.DEV_NVRED',
                ORG_NVRED NUMBER PATH '$.ORG_NVRED',
                DEV_PCENA VARCHAR2(50) PATH '$.DEV_PCENA',
                DAT_ROK VARCHAR2(50) PATH '$.DAT_ROK',
                RABAT NUMBER PATH '$.RABAT',
                MARZA NUMBER PATH '$.MARZA',
                POREZ NUMBER PATH '$.POREZ',
                PREN_POREZ NUMBER PATH '$.PREN_POREZ',
                POREZ_MARZA NUMBER PATH '$.POREZ_MARZA',
                FAKT_VRED NUMBER PATH '$.FAKT_VRED',
                TROSAK NUMBER PATH '$.TROSAK',
                OSN_NCENA NUMBER PATH '$.OSN_NCENA',
                NAB_RABAT_P NUMBER PATH '$.NAB_RABAT_P',
                SF_ART_PRO VARCHAR2(50) PATH '$.SF_ART_PRO',
                PROD_VRED NUMBER PATH '$.PROD_VRED',
                M_DOKUMENT VARCHAR2(50) PATH '$.M_DOKUMENT',
                ODOBRENO VARCHAR2(50) PATH '$.ODOBRENO',
                INT_NVRED VARCHAR2(50) PATH '$.INT_NVRED',
                KOMADA VARCHAR2(50) PATH '$.KOMADA',
                SF_KOM_DOB VARCHAR2(50) PATH '$.SF_KOM_DOB',
                LOT VARCHAR2(50) PATH '$.LOT',
                ZA_PROMET VARCHAR2(50) PATH '$.ZA_PROMET',
                SF_POPUST VARCHAR2(50) PATH '$.SF_POPUST',
                SF_RNR VARCHAR2(50) PATH '$.SF_RNR'
            ))
        ) LOOP

            -- Insert data into the DOKUMENT_STAVKE table
            INSERT INTO AP_DIJANA.DOKUMENT_STAVKE (
                SF_POS,
                RJ,
                SF_TIP_DOK,
                DOKUMENT,
                STAVKA,
                RBR,
                SF_ART,
                KOLICINA,
                REALIZOVANO,
                NAB_VRED,
                OSN_PCENA,
                PROD_CENA,
                DEV_NVRED,
                ORG_NVRED,
                DEV_PCENA,
                DAT_ROK,
                RABAT,
                MARZA,
                POREZ,
                PREN_POREZ,
                POREZ_MARZA,
                FAKT_VRED,
                TROSAK,
                OSN_NCENA,
                NAB_RABAT_P,
                SF_ART_PRO,
                PROD_VRED,
                M_DOKUMENT,
                ODOBRENO,
                INT_NVRED,
                KOMADA,
                SF_KOM_DOB,
                LOT,
                ZA_PROMET,
                SF_POPUST,
                SF_RNR
            ) VALUES (
                item_rec.SF_POS,
                item_rec.RJ,
                item_rec.SF_TIP_DOK,
                item_rec.DOKUMENT,
                item_rec.STAVKA,
                item_rec.RBR,
                item_rec.SF_ART,
                item_rec.KOLICINA,
                item_rec.REALIZOVANO,
                item_rec.NAB_VRED,
                item_rec.OSN_PCENA,
                item_rec.PROD_CENA,
                item_rec.DEV_NVRED,
                item_rec.ORG_NVRED,
                item_rec.DEV_PCENA,
                TO_DATE(item_rec.DAT_ROK, 'YYYY-MM-DD"T"HH24:MI:SS'),
                item_rec.RABAT,
                item_rec.MARZA,
                item_rec.POREZ,
                item_rec.PREN_POREZ,
                item_rec.POREZ_MARZA,
                item_rec.FAKT_VRED,
                item_rec.TROSAK,
                item_rec.OSN_NCENA,
                item_rec.NAB_RABAT_P,
                item_rec.SF_ART_PRO,
                item_rec.PROD_VRED,
                item_rec.M_DOKUMENT,
                item_rec.ODOBRENO,
                item_rec.INT_NVRED,
                item_rec.KOMADA,
                item_rec.SF_KOM_DOB,
                item_rec.LOT,
                item_rec.ZA_PROMET,
                item_rec.SF_POPUST,
                item_rec.SF_RNR
            );
             DBMS_OUTPUT.PUT_LINE('Upisano u DOKUMENT_STAVKE.');
         -- Display the JSON data
        DBMS_OUTPUT.PUT_LINE(file_data);
        END LOOP;
    END LOOP;
END;
/


--
-- UCITAJ_JSON_DOCUMENT_TEST  (Procedure) 
--
--  Dependencies: 
--   "BIN$GcAPC1uGAUjgYwqhCylrYg==$0" (Table)
--   "BIN$GcAPC1uJAUjgYwqhCylrYg==$0" (Table)
--   DBMS_OUTPUT (Synonym)
--   UTL_FILE (Synonym)
--   STANDARD (Package)
--   SYS_STUB_FOR_PURITY_ANALYSIS (Package)
--
CREATE OR REPLACE procedure AP_DIJANA.ucitaj_JSON_DOCUMENT_test
IS
    file_location VARCHAR2(255) := '/u02/DijanaTest';
    file_handle UTL_FILE.FILE_TYPE;
    file_data CLOB;
    buffer VARCHAR2(32767); -- Buffer size
BEGIN

 -- Open the JSON file
    file_handle := UTL_FILE.FOPEN('DOKUMENT_JSON_TEST', 'json_216_925_01_5.json', 'R');

    -- Read data from the file and append it to the CLOB variable file_data
    LOOP
        BEGIN
            UTL_FILE.GET_LINE(file_handle, buffer);
            file_data := file_data || buffer;      -- Assign the JSON data to the CLOB variable
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                EXIT;
        END;
    END LOOP;

    -- Close the file
    UTL_FILE.FCLOSE(file_handle);

    
    -- Now we have the JSON data in the file_data CLOB variable
    -- We can proceed to parse and process this JSON data dynamically
    
    -- Extracting data from the main document : DOKUMENT
    FOR main_rec IN (
        SELECT *
        FROM JSON_TABLE(file_data, '$[*]' COLUMNS (
            SF_POS VARCHAR2(50) PATH '$.SF_POS',
            RJ VARCHAR2(50) PATH '$.RJ',
            SF_TIP_DOK VARCHAR2(50) PATH '$.SF_TIP_DOK',
            DOKUMENT VARCHAR2(50) PATH '$.DOKUMENT',
            SF_PODTIP_DOK VARCHAR2(50) PATH '$.SF_PODTIP_DOK',
            IME_OP VARCHAR2(50) PATH '$.IME_OP',
            SF_RAD VARCHAR2(50) PATH '$.SF_RAD',
            DAT_FORM VARCHAR2(50) PATH '$.DAT_FORM',
            DAT_DOK VARCHAR2(50) PATH '$.DAT_DOK',
            DAT_DPO VARCHAR2(50) PATH '$.DAT_DPO',
            SF_POS_2 VARCHAR2(50) PATH '$.SF_POS_2',
            RJ_2 VARCHAR2(50) PATH '$.RJ_2',
            SF_KOM NUMBER PATH '$.SF_KOM',
            SF_KPOS VARCHAR2(50) PATH '$.SF_KPOS',
            IZJAVA VARCHAR2(50) PATH '$.IZJAVA',
            DAT_IZJ VARCHAR2(50) PATH '$.DAT_IZJ',
            SF_TIP_DOK_2 VARCHAR2(50) PATH '$.SF_TIP_DOK_2',
            DOKUMENT_2 VARCHAR2(50) PATH '$.DOKUMENT_2',
            IZNOS_DOK_2 NUMBER PATH '$.IZNOS_DOK_2',
            MAG_DOK VARCHAR2(50) PATH '$.MAG_DOK',
            OTPREMNICA VARCHAR2(50) PATH '$.OTPREMNICA',
            UGOVOR VARCHAR2(50) PATH '$.UGOVOR',
            JCI VARCHAR2(50) PATH '$.JCI',
            MARZA_P NUMBER PATH '$.MARZA_P',
            RABAT_P NUMBER PATH '$.RABAT_P',
            RABAT NUMBER PATH '$.RABAT',
            POPUST NUMBER PATH '$.POPUST',
            SF_DEV VARCHAR2(50) PATH '$.SF_DEV',
            DEV_KURS VARCHAR2(50) PATH '$.DEV_KURS',
            NAPOMENA VARCHAR2(50) PATH '$.NAPOMENA',
            ZAVRSENO NUMBER PATH '$.ZAVRSENO',
            STORNIRA NUMBER PATH '$.STORNIRA',
            SF_TIP_NAL VARCHAR2(50) PATH '$.SF_TIP_NAL',
            NALOG VARCHAR2(50) PATH '$.NALOG',
            OSN_PVRED NUMBER PATH '$.OSN_PVRED',
            PROD_VRED NUMBER PATH '$.PROD_VRED',
            DEV_NVRED NUMBER PATH '$.DEV_NVRED',
            ORG_NVRED NUMBER PATH '$.ORG_NVRED',
            MALOPRODAJA NUMBER PATH '$.MALOPRODAJA',
            IMA_POREZ NUMBER PATH '$.IMA_POREZ',
            POREZ NUMBER PATH '$.POREZ',
            PREN_POREZ NUMBER PATH '$.PREN_POREZ',
            POREZ_MARZA NUMBER PATH '$.POREZ_MARZA',
            TROSKOVI NUMBER PATH '$.TROSKOVI',
            BR_STAVKI NUMBER PATH '$.BR_STAVKI',
            UVODNI_TEKST VARCHAR2(4000) PATH '$.UVODNI_TEKST',
            ZAVRSNI_TEKST VARCHAR2(4000) PATH '$.ZAVRSNI_TEKST',
            OZNAKA VARCHAR2(50) PATH '$.OZNAKA',
            OTPREMLJENO VARCHAR2(50) PATH '$.OTPREMLJENO',
            SF_VZC VARCHAR2(50) PATH '$.SF_VZC',
            SF_VZL VARCHAR2(50) PATH '$.SF_VZL',
            DAT_SLANJA VARCHAR2(50) PATH '$.DAT_SLANJA',
            REALIZOVANO VARCHAR2(50) PATH '$.REALIZOVANO',
            M_TIP_DOK VARCHAR2(50) PATH '$.M_TIP_DOK',
            M_NAZIV VARCHAR2(50) PATH '$.M_NAZIV',
            M_DOKUMENT VARCHAR2(50) PATH '$.M_DOKUMENT',
            M_SF_KOM VARCHAR2(50) PATH '$.M_SF_KOM',
            OBRADJENO VARCHAR2(50) PATH '$.OBRADJENO'
        )) 
    ) 
    LOOP
        -- Insert data into the DOKUMENT table
        INSERT INTO AP_DIJANA.DOKUMENT (
            SF_POS,
            RJ,
            SF_TIP_DOK,
            DOKUMENT,
            SF_PODTIP_DOK,
            IME_OP,
            SF_RAD,
            DAT_FORM,
            DAT_DOK,
            DAT_DPO,
            SF_POS_2,
            RJ_2,
            SF_KOM,
            SF_KPOS,
            IZJAVA,
            DAT_IZJ,
            SF_TIP_DOK_2,
            DOKUMENT_2,
            IZNOS_DOK_2,
            MAG_DOK,
            OTPREMNICA,
            UGOVOR,
            JCI,
            MARZA_P,
            RABAT_P,
            RABAT,
            POPUST,
            SF_DEV,
            DEV_KURS,
            NAPOMENA,
            ZAVRSENO,
            STORNIRA,
            SF_TIP_NAL,
            NALOG,
            OSN_PVRED,
            PROD_VRED,
            DEV_NVRED,
            ORG_NVRED,
            MALOPRODAJA,
            IMA_POREZ,
            POREZ,
            PREN_POREZ,
            POREZ_MARZA,
            TROSKOVI,
            BR_STAVKI,
            UVODNI_TEKST,
            ZAVRSNI_TEKST,
            OZNAKA,
            OTPREMLJENO,
            SF_VZC,
            SF_VZL,
            DAT_SLANJA,
            REALIZOVANO,
            M_TIP_DOK,
            M_NAZIV,
            M_DOKUMENT,
            M_SF_KOM,
            OBRADJENO
        ) VALUES (
            main_rec.SF_POS,
            main_rec.RJ,
            main_rec.SF_TIP_DOK,
            main_rec.DOKUMENT,
            main_rec.SF_PODTIP_DOK,
            main_rec.IME_OP,
            main_rec.SF_RAD,
            TO_DATE(main_rec.DAT_FORM, 'YYYY-MM-DD"T"HH24:MI:SS'),
            TO_DATE(main_rec.DAT_DOK, 'YYYY-MM-DD"T"HH24:MI:SS'),
            TO_DATE(main_rec.DAT_DPO, 'YYYY-MM-DD"T"HH24:MI:SS'),
            main_rec.SF_POS_2,
            main_rec.RJ_2,
            main_rec.SF_KOM,
            main_rec.SF_KPOS,
            main_rec.IZJAVA,
            main_rec.DAT_IZJ,
            main_rec.SF_TIP_DOK_2,
            main_rec.DOKUMENT_2,
            main_rec.IZNOS_DOK_2,
            main_rec.MAG_DOK,
            main_rec.OTPREMNICA,
            main_rec.UGOVOR,
            main_rec.JCI,
            main_rec.MARZA_P,
            main_rec.RABAT_P,
            main_rec.RABAT,
            main_rec.POPUST,
            main_rec.SF_DEV,
            main_rec.DEV_KURS,
            main_rec.NAPOMENA,
            main_rec.ZAVRSENO,
            main_rec.STORNIRA,
            main_rec.SF_TIP_NAL,
            main_rec.NALOG,
            main_rec.OSN_PVRED,
            main_rec.PROD_VRED,
            main_rec.DEV_NVRED,
            main_rec.ORG_NVRED,
            main_rec.MALOPRODAJA,
            main_rec.IMA_POREZ,
            main_rec.POREZ,
            main_rec.PREN_POREZ,
            main_rec.POREZ_MARZA,
            main_rec.TROSKOVI,
            main_rec.BR_STAVKI,
            main_rec.UVODNI_TEKST,
            main_rec.ZAVRSNI_TEKST,
            main_rec.OZNAKA,
            main_rec.OTPREMLJENO,
            main_rec.SF_VZC,
            main_rec.SF_VZL,
            main_rec.DAT_SLANJA,
            main_rec.REALIZOVANO,
            main_rec.M_TIP_DOK,
            main_rec.M_NAZIV,
            main_rec.M_DOKUMENT,
            main_rec.M_SF_KOM,
            main_rec.OBRADJENO
        );
        DBMS_OUTPUT.PUT_LINE('Upisano u DOKUMENT.');
         -- Display the JSON data
        DBMS_OUTPUT.PUT_LINE(file_data);
        --Extracting data from items inside the main document : DOKUMENT_STAVKE
        -- Extracting data from items inside the main document : DOKUMENT_STAVKE
        FOR item_rec IN (
            SELECT *
            FROM JSON_TABLE(file_data, '$.dokument_stavke[*]' COLUMNS (
                SF_POS VARCHAR2(50) PATH '$.SF_POS',
                RJ VARCHAR2(50) PATH '$.RJ',
                SF_TIP_DOK VARCHAR2(50) PATH '$.SF_TIP_DOK',
                DOKUMENT VARCHAR2(50) PATH '$.DOKUMENT',
                STAVKA NUMBER PATH '$.STAVKA',
                RBR NUMBER PATH '$.RBR',
                SF_ART VARCHAR2(50) PATH '$.SF_ART',
                KOLICINA NUMBER PATH '$.KOLICINA',
                REALIZOVANO NUMBER PATH '$.REALIZOVANO',
                NAB_VRED NUMBER PATH '$.NAB_VRED',
                OSN_PCENA NUMBER PATH '$.OSN_PCENA',
                PROD_CENA NUMBER PATH '$.PROD_CENA',
                DEV_NVRED NUMBER PATH '$.DEV_NVRED',
                ORG_NVRED NUMBER PATH '$.ORG_NVRED',
                DEV_PCENA VARCHAR2(50) PATH '$.DEV_PCENA',
                DAT_ROK VARCHAR2(50) PATH '$.DAT_ROK',
                RABAT NUMBER PATH '$.RABAT',
                MARZA NUMBER PATH '$.MARZA',
                POREZ NUMBER PATH '$.POREZ',
                PREN_POREZ NUMBER PATH '$.PREN_POREZ',
                POREZ_MARZA NUMBER PATH '$.POREZ_MARZA',
                FAKT_VRED NUMBER PATH '$.FAKT_VRED',
                TROSAK NUMBER PATH '$.TROSAK',
                OSN_NCENA NUMBER PATH '$.OSN_NCENA',
                NAB_RABAT_P NUMBER PATH '$.NAB_RABAT_P',
                SF_ART_PRO VARCHAR2(50) PATH '$.SF_ART_PRO',
                PROD_VRED NUMBER PATH '$.PROD_VRED',
                M_DOKUMENT VARCHAR2(50) PATH '$.M_DOKUMENT',
                ODOBRENO VARCHAR2(50) PATH '$.ODOBRENO',
                INT_NVRED VARCHAR2(50) PATH '$.INT_NVRED',
                KOMADA VARCHAR2(50) PATH '$.KOMADA',
                SF_KOM_DOB VARCHAR2(50) PATH '$.SF_KOM_DOB',
                LOT VARCHAR2(50) PATH '$.LOT',
                ZA_PROMET VARCHAR2(50) PATH '$.ZA_PROMET',
                SF_POPUST VARCHAR2(50) PATH '$.SF_POPUST',
                SF_RNR VARCHAR2(50) PATH '$.SF_RNR'
            ))
        ) LOOP

            -- Insert data into the DOKUMENT_STAVKE table
            INSERT INTO AP_DIJANA.DOKUMENT_STAVKE (
                SF_POS,
                RJ,
                SF_TIP_DOK,
                DOKUMENT,
                STAVKA,
                RBR,
                SF_ART,
                KOLICINA,
                REALIZOVANO,
                NAB_VRED,
                OSN_PCENA,
                PROD_CENA,
                DEV_NVRED,
                ORG_NVRED,
                DEV_PCENA,
                DAT_ROK,
                RABAT,
                MARZA,
                POREZ,
                PREN_POREZ,
                POREZ_MARZA,
                FAKT_VRED,
                TROSAK,
                OSN_NCENA,
                NAB_RABAT_P,
                SF_ART_PRO,
                PROD_VRED,
                M_DOKUMENT,
                ODOBRENO,
                INT_NVRED,
                KOMADA,
                SF_KOM_DOB,
                LOT,
                ZA_PROMET,
                SF_POPUST,
                SF_RNR
            ) VALUES (
                item_rec.SF_POS,
                item_rec.RJ,
                item_rec.SF_TIP_DOK,
                item_rec.DOKUMENT,
                item_rec.STAVKA,
                item_rec.RBR,
                item_rec.SF_ART,
                item_rec.KOLICINA,
                item_rec.REALIZOVANO,
                item_rec.NAB_VRED,
                item_rec.OSN_PCENA,
                item_rec.PROD_CENA,
                item_rec.DEV_NVRED,
                item_rec.ORG_NVRED,
                item_rec.DEV_PCENA,
                TO_DATE(item_rec.DAT_ROK, 'YYYY-MM-DD"T"HH24:MI:SS'),
                item_rec.RABAT,
                item_rec.MARZA,
                item_rec.POREZ,
                item_rec.PREN_POREZ,
                item_rec.POREZ_MARZA,
                item_rec.FAKT_VRED,
                item_rec.TROSAK,
                item_rec.OSN_NCENA,
                item_rec.NAB_RABAT_P,
                item_rec.SF_ART_PRO,
                item_rec.PROD_VRED,
                item_rec.M_DOKUMENT,
                item_rec.ODOBRENO,
                item_rec.INT_NVRED,
                item_rec.KOMADA,
                item_rec.SF_KOM_DOB,
                item_rec.LOT,
                item_rec.ZA_PROMET,
                item_rec.SF_POPUST,
                item_rec.SF_RNR
            );
             DBMS_OUTPUT.PUT_LINE('Upisano u DOKUMENT_STAVKE.');
         -- Display the JSON data
        DBMS_OUTPUT.PUT_LINE(file_data);
        END LOOP;
    END LOOP;
END;
/


--
-- FLEX_ATTENDANCE_RECORD  (Table) 
--
--  Dependencies: 
--   FLEX_STORE (Table)
--   FLEX_ATTENDANCE_RECORD_TYPE (Table)
--   FLEX_USER (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD
(
  NAME                  VARCHAR2(50 BYTE)       NOT NULL,
  LAST_NAME             VARCHAR2(50 BYTE)       NOT NULL,
  ARRIVAL_TIME          DATE,
  TYPE_OF_JOB           VARCHAR2(50 BYTE),
  SF_TYPE_OF_PRESENCE   VARCHAR2(4 BYTE),
  USER_ID               NUMBER                  NOT NULL,
  TIME_OF_DEPARTURE     DATE,
  SF_POS                VARCHAR2(3 BYTE)        NOT NULL,
  RJ                    VARCHAR2(3 BYTE)        NOT NULL,
  WHO_ADDED             NVARCHAR2(50),
  WHEN_ADDED            DATE,
  WHO_CHANGED           NVARCHAR2(50),
  WHEN_CHANGED          DATE,
  ATTENDANCE_RECORD_ID  NUMBER
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- ATTENDANCE_RECORD_PK  (Index) 
--
--  Dependencies: 
--   FLEX_ATTENDANCE_RECORD (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.ATTENDANCE_RECORD_PK ON AP_DIJANA.FLEX_ATTENDANCE_RECORD
(ATTENDANCE_RECORD_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD ADD (
  CONSTRAINT ATTENDANCE_RECORD_PK
  PRIMARY KEY
  (ATTENDANCE_RECORD_ID)
  USING INDEX AP_DIJANA.ATTENDANCE_RECORD_PK
  ENABLE VALIDATE);



--
-- FLEX_CERTIFICATE_FROM_THE_SCHOOL_T  (Table) 
--
--  Dependencies: 
--   FLEX_USER_T (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL_T
(
  CERTIFICATE_ID   VARCHAR2(10 BYTE),
  USER_ID          NUMBER                       NOT NULL,
  APP_LANGUAGE_ID  NUMBER                       NOT NULL,
  IS_ACTIVE        CHAR(1 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CERTIFICATE_FROM_THE_SCHOOL_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CERTIFICATE_FROM_THE_SCHOOL_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.CERTIFICATE_FROM_THE_SCHOOL_T_PK ON AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL_T
(CERTIFICATE_ID, USER_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL_T ADD (
  CONSTRAINT CERTIFICATE_FROM_THE_SCHOOL_T_PK
  PRIMARY KEY
  (CERTIFICATE_ID, USER_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.CERTIFICATE_FROM_THE_SCHOOL_T_PK
  ENABLE VALIDATE);



--
-- FLEX_CONTRACT_TYPE  (Table) 
--
--  Dependencies: 
--   FLEX_TYPE_CONTRACT_PARENT (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CONTRACT_TYPE
(
  SF_CONTRACT          VARCHAR2(3 BYTE),
  DESCRIPTION          VARCHAR2(30 BYTE),
  MAX_NUMBER_OF_HOURS  NUMBER,
  IS_ACTIVE            CHAR(1 BYTE),
  SF_CONTRACT_PARENT   VARCHAR2(3 BYTE),
  WHO_ADDED            NVARCHAR2(50),
  WHEN_ADDED           DATE,
  WHO_CHANGED          NVARCHAR2(50),
  WHEN_CHANGED         DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_CONTRACT_TYPE_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CONTRACT_TYPE (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_CONTRACT_TYPE_PK ON AP_DIJANA.FLEX_CONTRACT_TYPE
(SF_CONTRACT, SF_CONTRACT_PARENT)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_TYPE ADD (
  CONSTRAINT FLEX_CONTRACT_TYPE_PK
  PRIMARY KEY
  (SF_CONTRACT, SF_CONTRACT_PARENT)
  USING INDEX AP_DIJANA.FLEX_CONTRACT_TYPE_PK
  ENABLE VALIDATE);



--
-- FLEX_CONTRACT_TYPE_T  (Table) 
--
--  Dependencies: 
--   FLEX_TYPE_CONTRACT_PARENT_T (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CONTRACT_TYPE_T
(
  SF_CONTRACT         VARCHAR2(3 BYTE),
  APP_LANGUAGE_ID     NUMBER                    NOT NULL,
  DESCRIPTION         VARCHAR2(30 BYTE),
  IS_ACTIVE           CHAR(1 BYTE),
  SF_CONTRACT_PARENT  VARCHAR2(3 BYTE),
  WHO_ADDED           NVARCHAR2(50),
  WHEN_ADDED          DATE,
  WHO_CHANGED         NVARCHAR2(50),
  WHEN_CHANGED        DATE
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- FLEX_CONTRACT_TYPE_T_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CONTRACT_TYPE_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.FLEX_CONTRACT_TYPE_T_PK ON AP_DIJANA.FLEX_CONTRACT_TYPE_T
(SF_CONTRACT, SF_CONTRACT_PARENT, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_TYPE_T ADD (
  CONSTRAINT FLEX_CONTRACT_TYPE_T_PK
  PRIMARY KEY
  (SF_CONTRACT, SF_CONTRACT_PARENT, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.FLEX_CONTRACT_TYPE_T_PK
  ENABLE VALIDATE);



--
-- FLEX_CONTRACT_FLEX_USER  (Table) 
--
--  Dependencies: 
--   FLEX_USER_CMS (Table)
--   FLEX_CONTRACT_TYPE (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER
(
  SF_CONTRACT         VARCHAR2(3 BYTE),
  VALID_FROM          DATE,
  VALID_TO            DATE,
  USER_ID             NUMBER,
  USER_CMS_ID         NUMBER,
  DATE_OF_SIGNING     DATE,
  WHO_CHANGED         NVARCHAR2(50),
  WHEN_CHANGED        DATE,
  SF_CONTRACT_PARENT  VARCHAR2(3 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- PK_USER_CONTRACT  (Index) 
--
--  Dependencies: 
--   FLEX_CONTRACT_FLEX_USER (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.PK_USER_CONTRACT ON AP_DIJANA.FLEX_CONTRACT_FLEX_USER
(SF_CONTRACT, USER_ID, USER_CMS_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER ADD (
  CONSTRAINT PK_USER_CONTRACT
  PRIMARY KEY
  (SF_CONTRACT, USER_ID, USER_CMS_ID)
  USING INDEX AP_DIJANA.PK_USER_CONTRACT
  ENABLE VALIDATE);



--
-- FLEX_CONTRACT_FLEX_USER_T  (Table) 
--
--  Dependencies: 
--   FLEX_USER_CMS_T (Table)
--   FLEX_CONTRACT_TYPE_T (Table)
--
--   Row Count: 0
CREATE TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T
(
  SF_CONTRACT         VARCHAR2(3 BYTE),
  APP_LANGUAGE_ID     NUMBER                    NOT NULL,
  USER_ID             NUMBER,
  USER_CMS_ID         NUMBER,
  WHO_CHANGED         NVARCHAR2(50),
  WHEN_CHANGED        DATE,
  SF_CONTRACT_PARENT  VARCHAR2(3 BYTE)
)
TABLESPACE USERS
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CONTRACT_FLEX_PK  (Index) 
--
--  Dependencies: 
--   FLEX_CONTRACT_FLEX_USER_T (Table)
--
CREATE UNIQUE INDEX AP_DIJANA.CONTRACT_FLEX_PK ON AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T
(SF_CONTRACT, USER_ID, USER_CMS_ID, APP_LANGUAGE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T ADD (
  CONSTRAINT CONTRACT_FLEX_PK
  PRIMARY KEY
  (SF_CONTRACT, USER_ID, USER_CMS_ID, APP_LANGUAGE_ID)
  USING INDEX AP_DIJANA.CONTRACT_FLEX_PK
  ENABLE VALIDATE);



-- 
-- FLEX_ATTENDANCE_RECORD_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
--    FLEX_ATTENDANCE_RECORD_TYPE (Table)
ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD_T ADD (
  CONSTRAINT FK_LANGUAGE_ATTRECORD 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD_T ADD (
  CONSTRAINT FK_TYPE_OF_PRESENCE 
  FOREIGN KEY (SF_TYPE_OF_PRESENCE) 
  REFERENCES AP_DIJANA.FLEX_ATTENDANCE_RECORD_TYPE (SF_RECORD_TYPE)
  ENABLE VALIDATE);


-- 
-- FLEX_CERTIFICATE_FROM_THE_SCHOOL  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_USER (Table)
ALTER TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL ADD (
  CONSTRAINT FK_CERTIFICATE_USER 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_EVALUATION  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_STORE (Table)
--    FLEX_USER (Table)
ALTER TABLE AP_DIJANA.FLEX_EVALUATION ADD (
  CONSTRAINT FK_STORE_EVALUATION 
  FOREIGN KEY (SF_POS, RJ) 
  REFERENCES AP_DIJANA.FLEX_STORE (SF_POS, RJ)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_EVALUATION ADD (
  CONSTRAINT FK_USER_EVALUATION 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_EVALUATION_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
--    FLEX_STORE (Table)
--    FLEX_USER_T (Table)
ALTER TABLE AP_DIJANA.FLEX_EVALUATION_T ADD (
  CONSTRAINT FK_LANGUAGE_EVALUATION 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_EVALUATION_T ADD (
  CONSTRAINT FK_STORE_EVALUATION_T 
  FOREIGN KEY (SF_POS, RJ) 
  REFERENCES AP_DIJANA.FLEX_STORE (SF_POS, RJ)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_EVALUATION_T ADD (
  CONSTRAINT FK_USER_EVALUATION_T 
  FOREIGN KEY (USER_ID, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_USER_T (USER_ID, APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_MPO_FUND_HOURS  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_STORE (Table)
ALTER TABLE AP_DIJANA.FLEX_MPO_FUND_HOURS ADD (
  CONSTRAINT FK_RADNJA_FOND 
  FOREIGN KEY (SF_POS, RJ) 
  REFERENCES AP_DIJANA.FLEX_STORE (SF_POS, RJ)
  ENABLE VALIDATE);


-- 
-- FLEX_OFFER  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_STORE (Table)
ALTER TABLE AP_DIJANA.FLEX_OFFER ADD (
  CONSTRAINT FK_PONUDA_RADNJA 
  FOREIGN KEY (SF_POS, RJ) 
  REFERENCES AP_DIJANA.FLEX_STORE (SF_POS, RJ)
  ENABLE VALIDATE);


-- 
-- FLEX_OFFER_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
ALTER TABLE AP_DIJANA.FLEX_OFFER_T ADD (
  CONSTRAINT FK_LANGUAGE_OFFER 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_OFFER_USER  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_OFFER (Table)
--    FLEX_USER (Table)
ALTER TABLE AP_DIJANA.FLEX_OFFER_USER ADD (
  CONSTRAINT FK_PONUDA 
  FOREIGN KEY (OFFER_ID) 
  REFERENCES AP_DIJANA.FLEX_OFFER (OFFER_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_OFFER_USER ADD (
  CONSTRAINT FK_PONUDA_USER 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_OFFER_USER_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
--    FLEX_OFFER_T (Table)
--    FLEX_USER_T (Table)
ALTER TABLE AP_DIJANA.FLEX_OFFER_USER_T ADD (
  CONSTRAINT FK_LANGUAGE_OFFER_USER 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_OFFER_USER_T ADD (
  CONSTRAINT FK_OFFER_T 
  FOREIGN KEY (OFFER_ID, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_OFFER_T (OFFER_ID, APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_OFFER_USER_T ADD (
  CONSTRAINT FK_OFFER_USER_T 
  FOREIGN KEY (USER_ID, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_USER_T (USER_ID, APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_SANITARY_BOOKLET  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_USER (Table)
ALTER TABLE AP_DIJANA.FLEX_SANITARY_BOOKLET ADD (
  CONSTRAINT FK_USER_SANITARNA 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_STATUS_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
ALTER TABLE AP_DIJANA.FLEX_STATUS_T ADD (
  CONSTRAINT FK_LANGUAGE_STATUS 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_STORE  (Table Foreign Keys)
-- 
-- Dependencies: 
--    OPSTI.POSLOVNICA (Table)
ALTER TABLE AP_DIJANA.FLEX_STORE ADD (
  CONSTRAINT FK_STORE_POSLOVNICA 
  FOREIGN KEY (SF_POS, RJ) 
  REFERENCES OPSTI.POSLOVNICA (SF_POS, RJ)
  ENABLE VALIDATE);


-- 
-- FLEX_TRAINING_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
ALTER TABLE AP_DIJANA.FLEX_TRAINING_T ADD (
  CONSTRAINT FK_LANGUAGE_TRAINING 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_TRAINING_USER  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_USER (Table)
--    FLEX_TRAINING (Table)
ALTER TABLE AP_DIJANA.FLEX_TRAINING_USER ADD (
  CONSTRAINT FK_FLEXOVAC_OBUKA 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_TRAINING_USER ADD (
  CONSTRAINT FK_OBUKA_FLEXOVAC 
  FOREIGN KEY (TRAINING_ID) 
  REFERENCES AP_DIJANA.FLEX_TRAINING (TRAINING_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_TYPE_CONTRACT_PARENT_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
ALTER TABLE AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T ADD (
  CONSTRAINT FK_LANGUAGE_CONTRACT_PARENT 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_USER  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_STATUS (Table)
ALTER TABLE AP_DIJANA.FLEX_USER ADD (
  CONSTRAINT FK_STATUS_USER 
  FOREIGN KEY (SF_STATUS) 
  REFERENCES AP_DIJANA.FLEX_STATUS (SF_STATUS)
  ENABLE VALIDATE);


-- 
-- FLEX_USER_CMS  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_CMS_SUPPLIER (Table)
ALTER TABLE AP_DIJANA.FLEX_USER_CMS ADD (
  CONSTRAINT FK_FLEX_U_CMS_SUPPLIER_ID 
  FOREIGN KEY (CMS_SUPPLIER_ID) 
  REFERENCES AP_DIJANA.FLEX_CMS_SUPPLIER (CMS_SUPPLIER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_USER_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_APP_LANGUAGE (Table)
--    FLEX_STATUS_T (Table)
ALTER TABLE AP_DIJANA.FLEX_USER_T ADD (
  CONSTRAINT FK_LANGUAGE_USER 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_USER_T ADD (
  CONSTRAINT FK_STATUS_USER_T 
  FOREIGN KEY (SF_STATUS, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_STATUS_T (SF_STATUS, APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_ATTENDANCE_RECORD  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_STORE (Table)
--    FLEX_ATTENDANCE_RECORD_TYPE (Table)
--    FLEX_USER (Table)
ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD ADD (
  CONSTRAINT FK_RADNJA_EVIDENCIJA 
  FOREIGN KEY (SF_POS, RJ) 
  REFERENCES AP_DIJANA.FLEX_STORE (SF_POS, RJ)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD ADD (
  CONSTRAINT FK_TIP_PRISUTNOSTI 
  FOREIGN KEY (SF_TYPE_OF_PRESENCE) 
  REFERENCES AP_DIJANA.FLEX_ATTENDANCE_RECORD_TYPE (SF_RECORD_TYPE)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_ATTENDANCE_RECORD ADD (
  CONSTRAINT FK_USER_EVIDENCIJA 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_CERTIFICATE_FROM_THE_SCHOOL_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_USER_T (Table)
--    FLEX_APP_LANGUAGE (Table)
ALTER TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL_T ADD (
  CONSTRAINT FK_CERTIFICATE_USER_T 
  FOREIGN KEY (USER_ID, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_USER_T (USER_ID, APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CERTIFICATE_FROM_THE_SCHOOL_T ADD (
  CONSTRAINT FK_LANGUAGE_CERTIFICATE 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_CONTRACT_TYPE  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_TYPE_CONTRACT_PARENT (Table)
ALTER TABLE AP_DIJANA.FLEX_CONTRACT_TYPE ADD (
  CONSTRAINT FK_CONTRACT_TYPE_PARENT 
  FOREIGN KEY (SF_CONTRACT_PARENT) 
  REFERENCES AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT (SF_CONTRACT_PARENT)
  ENABLE VALIDATE);


-- 
-- FLEX_CONTRACT_TYPE_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_TYPE_CONTRACT_PARENT_T (Table)
--    FLEX_APP_LANGUAGE (Table)
ALTER TABLE AP_DIJANA.FLEX_CONTRACT_TYPE_T ADD (
  CONSTRAINT FK_CONTRACT_TYPE_PARENT_T 
  FOREIGN KEY (SF_CONTRACT_PARENT, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_TYPE_CONTRACT_PARENT_T (SF_CONTRACT_PARENT, APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_TYPE_T ADD (
  CONSTRAINT FK_LANGUAGE_CONTRACT_TYPE 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_CONTRACT_FLEX_USER  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_USER_CMS (Table)
--    FLEX_CONTRACT_TYPE (Table)
--    FLEX_USER (Table)
ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER ADD (
  CONSTRAINT FK_CMS_CONTRACT 
  FOREIGN KEY (USER_CMS_ID) 
  REFERENCES AP_DIJANA.FLEX_USER_CMS (USER_CMS_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER ADD (
  CONSTRAINT FK_CONTRACT_TYPE 
  FOREIGN KEY (SF_CONTRACT, SF_CONTRACT_PARENT) 
  REFERENCES AP_DIJANA.FLEX_CONTRACT_TYPE (SF_CONTRACT, SF_CONTRACT_PARENT)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER ADD (
  CONSTRAINT FK_USER_CONTRACT 
  FOREIGN KEY (USER_ID) 
  REFERENCES AP_DIJANA.FLEX_USER (USER_ID)
  ENABLE VALIDATE);


-- 
-- FLEX_CONTRACT_FLEX_USER_T  (Table Foreign Keys)
-- 
-- Dependencies: 
--    FLEX_USER_CMS_T (Table)
--    FLEX_CONTRACT_TYPE_T (Table)
--    FLEX_APP_LANGUAGE (Table)
--    FLEX_USER_T (Table)
ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T ADD (
  CONSTRAINT FK_CMS_CONTRACT_T 
  FOREIGN KEY (USER_CMS_ID, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_USER_CMS_T (USER_CMS_ID, APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T ADD (
  CONSTRAINT FK_CONTRACT_TYPE_T 
  FOREIGN KEY (SF_CONTRACT, SF_CONTRACT_PARENT, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_CONTRACT_TYPE_T (SF_CONTRACT, SF_CONTRACT_PARENT, APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T ADD (
  CONSTRAINT FK_LANGUAGE_CONTRACT_USER 
  FOREIGN KEY (APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_APP_LANGUAGE (APP_LANGUAGE_ID)
  ENABLE VALIDATE);

ALTER TABLE AP_DIJANA.FLEX_CONTRACT_FLEX_USER_T ADD (
  CONSTRAINT FK_USER_CONTRACT_T 
  FOREIGN KEY (USER_ID, APP_LANGUAGE_ID) 
  REFERENCES AP_DIJANA.FLEX_USER_T (USER_ID, APP_LANGUAGE_ID)
  ENABLE VALIDATE);
